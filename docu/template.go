// Code generated for package docu by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/documentation.md
// template/html/index.html
// template/html/main.css
package docu

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _documentationMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x54\x4d\x6f\xd4\x30\x10\xbd\xe7\x57\x8c\x94\x1c\x68\x44\xd3\xfb\xaa\xec\x81\x52\xc4\xa5\x1f\xea\x2e\xf4\xba\x4e\x32\xc9\x1a\x12\xdb\xb5\xbd\xd0\xb2\xc9\x7f\x47\xe3\x38\xde\x6c\x56\x95\x38\x81\xe0\x10\xc9\x99\xcf\xe7\xf7\xc6\x13\xc3\x7e\x0f\xd9\x0a\xf5\x77\x5e\x60\x76\xcb\x5a\x84\xbe\x07\x33\xfc\x47\xd1\x7e\x0f\xbc\x82\xec\x0b\x6a\xc3\xa5\xf0\xee\x34\xf5\xff\x8b\x34\x75\xe9\xc7\x6e\x20\x1b\x8a\x12\xfa\x3e\x0a\xa1\x60\x79\x8b\xb3\xf8\x35\x77\xf1\xae\x4b\x80\xf0\x01\x4d\xa1\xb9\xb2\x94\x43\xbe\x38\x86\x2b\x29\x2a\x5e\xef\x34\x23\x63\x14\xdd\x33\xbb\x05\xa5\xb1\xe2\xcf\x0b\xd8\x78\x84\x63\xfa\x27\x6b\xd5\xbd\xf3\x41\xdf\x4f\xeb\xce\x1d\xd8\x18\x6a\x7e\x11\xb0\x6e\x00\xa2\x2b\xd9\x2a\x8d\xc6\x01\x46\xc1\xf2\x06\xcb\x05\xcc\x3a\x4c\x62\xae\x87\x10\xe8\xfb\x17\x34\x87\x9a\x42\x86\xa2\x00\xd1\x2c\xfd\x71\xe5\xf0\xf7\x3d\x3c\x62\xbe\x92\xc5\x37\xb4\x60\x76\x4a\x49\x6d\xb1\x7c\x0b\x8a\xd9\xed\xe2\x48\x93\x90\x70\x60\x95\x48\xb9\x41\xbb\x95\xa5\xa1\xf2\x9a\x89\x1a\x21\x69\x61\xf1\xee\x90\xe6\xfd\x14\x1e\xc7\x4e\xe5\xa4\x1d\xf5\x9d\x24\xe5\x94\x94\xb4\x8e\x9e\xf7\x5c\x94\x5c\xd4\x66\x10\x8e\x98\x4d\x72\x5f\x07\x3a\x58\xcb\xcf\x4a\xa1\x26\xa6\xd2\x14\xbc\x97\xa0\x3d\xb0\x1f\x9e\xbe\x03\xc2\xcb\x12\x2d\xe3\x8d\x59\x3a\x71\x93\xd6\x97\x21\xf2\x5a\x14\xd6\x40\x07\xb7\x52\xb7\xac\xe1\x3f\x31\xd8\x06\x60\xbc\x82\x37\x5c\x94\xf8\x0c\x49\x76\x83\xc6\xb0\x1a\x0d\x55\x78\xc0\xa7\x1d\x1a\x7b\x96\x7d\xe4\xd8\x84\x8b\xc5\x70\xcf\x34\x6b\xd1\xa2\x36\xd1\x12\x3a\x10\x74\xc5\x0e\x34\x3e\xed\xb8\x46\x02\x6e\x5f\x14\x59\xca\xc9\x60\x75\xc0\xca\x92\xd3\x91\x35\xc0\x45\x45\x50\x06\x07\xd5\x38\x3f\x3f\x3f\xf9\x0e\x8c\x29\x62\xec\x77\x11\x12\x22\x22\x40\x85\xa7\xd5\xf9\x79\x4a\x54\x76\xa7\x3c\x82\x71\x64\x86\xf1\xf1\xb3\x34\xcc\xcf\x98\xbe\x1e\x2e\x71\x6d\x0a\xa6\x70\xea\x38\x7e\x2f\x83\xd9\x23\x95\x4e\xdb\xb1\x0f\xe1\x71\xaa\xc9\x69\x9d\xcd\x65\xae\x2f\x96\xb3\x7e\x5e\xc4\xa3\xd3\xeb\xb2\x18\x25\x85\xc1\x13\x5d\x46\xc7\xdf\x57\xe5\x14\xe0\x3f\x2d\xcb\x72\x72\xbe\xbc\x08\x0f\xed\x78\x3d\xdc\xe5\x5f\xb1\xb0\xd3\xf5\xe0\x24\xa0\x0d\xf1\x80\x15\x6a\x14\x85\x5b\x5c\xee\x75\x9a\xfa\x15\xf6\x28\xe7\x6c\x88\x22\x6e\x5a\x53\x87\x15\x12\x96\xca\xc4\x36\xfe\xcf\x77\xf8\x9f\x9b\x00\xd7\xfe\x3f\xd1\x39\x9c\xc2\xe1\x57\x00\x00\x00\xff\xff\xa0\xae\xa0\x84\xad\x07\x00\x00")

func documentationMdBytes() ([]byte, error) {
	return bindataRead(
		_documentationMd,
		"documentation.md",
	)
}

func documentationMd() (*asset, error) {
	bytes, err := documentationMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "documentation.md", size: 1965, mode: os.FileMode(420), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x51\x6f\xdb\x36\x10\x7e\xef\xaf\xb8\x69\x7e\x58\x81\x46\x5a\x9a\x3e\x0c\x01\x25\x60\x4b\x3b\x6c\x0f\x6d\x82\x24\x58\xb1\x47\x4a\x3c\x99\x5c\x24\x52\x25\x69\xa7\x9e\xe7\xff\x3e\x90\xa2\x2c\xd9\x92\x1d\x77\xd8\x1e\x56\xe4\x29\x20\xef\xf8\xdd\xdd\x77\xf7\x51\x8c\xc9\x37\x6f\xaf\xaf\xee\x7f\xbf\x79\x07\xdc\xd6\x55\xf6\x82\xb8\x3f\x50\x51\x39\x4f\x23\x94\x91\xdb\x40\xca\xb2\x17\x00\x00\xa4\x46\x4b\xa1\xe0\x54\x1b\xb4\x69\xb4\xb0\xe5\xd9\x0f\x51\x30\x59\x61\x2b\xcc\xd6\x6b\x88\xef\x50\x2f\x45\x81\xf1\x07\x5a\x23\x6c\x36\xf0\xe3\xcd\xaf\xc0\x54\xb1\xa8\x51\x5a\x6a\x85\x92\x24\x69\x9d\x07\x98\x92\xd6\x98\x46\x4b\x81\x8f\x8d\xd2\x36\x82\x42\x49\x8b\xd2\xa6\xd1\xa3\x60\x96\xa7\x0c\x1d\xe2\x99\x5f\xbc\x02\x21\x85\x15\xb4\x3a\x33\x05\xad\x30\x3d\x8f\xbf\xef\x72\xa8\x84\x7c\x00\x8d\x55\x1a\x19\xbb\xaa\xd0\x70\x44\x1b\x01\xd7\x58\xa6\x51\x4d\x85\x8c\x0b\x63\xa2\x71\xd8\x42\x55\x4a\x9f\x99\x82\x63\x8d\x83\xd0\x95\x98\x73\x0b\x8c\xea\x07\xc7\x42\xd2\xd2\x40\x72\xc5\x56\x01\x82\x89\x25\x14\x15\x35\x26\x8d\x8c\x60\x18\x90\xf7\x4d\x85\xaa\x06\x16\x6f\xe5\xe7\x93\x44\x99\x76\x4d\x12\x7e\xbe\x7b\x60\xbd\x06\x51\x42\xfc\x1b\x6a\x23\x94\x0c\xee\xc4\x34\x54\x66\x24\xcf\xc2\xf6\x25\x49\xf2\xcc\xb9\xee\xfb\x25\xde\x71\xbd\x06\x94\x0c\x36\x9b\xdd\x54\x3a\x90\x7b\x51\xe3\x08\xc1\x6d\xf6\x08\x7d\x75\x09\x13\xcb\xc1\x32\xd7\xc9\x60\x25\xe9\x32\x1b\xc7\xd8\x12\x85\x85\x1b\x81\x28\x7b\x8f\x96\x2b\x66\xf6\xb1\x43\xb9\x9a\xca\x39\xc2\xac\x86\xcb\xb4\xe7\x29\x1c\x19\xd5\x40\x43\x8b\xbf\x5d\xaf\x61\x56\x77\x74\x46\xd9\xce\x92\x24\x74\x14\xe5\x10\x21\xa3\x64\xaf\xf3\x3f\xb0\xb0\x27\x25\x7b\x8b\x25\x6a\x94\x05\x3a\x68\x9f\x81\x99\x3b\xc3\x77\x42\x32\xfc\x0c\xb3\xf8\x3d\x1a\x43\xe7\x68\x60\x56\xbf\x6c\x5d\x44\xe9\xbd\xba\x4c\x8f\x15\xd7\x7b\x85\xf2\xfa\x8d\xc3\x05\x8e\x2b\x25\xc9\xb6\x4b\x83\x66\x12\xa7\x91\x41\x27\xf9\xeb\xec\x4a\xc9\x52\xcc\x17\x3a\xe8\x96\xbf\x1e\x98\x3d\x17\x37\xd4\x72\x68\x34\x96\xe2\xf3\x25\x90\x42\x31\x7f\x07\xb8\x69\xed\xba\xf6\x8b\xb5\xcd\x8d\x77\x68\x53\x39\x68\xc0\xca\xb8\x3a\x92\x6d\xba\x24\xf1\x78\xa3\xf1\xf3\xcb\x2b\x55\x37\x1a\x8d\x1b\x53\x40\x49\xf3\x0a\xd9\x25\xec\x85\x1e\xf8\xbc\x6b\x5d\x60\xb3\x59\xa1\xe9\x83\x49\x35\x88\xb6\x1b\x66\x0f\xeb\xe3\x9d\x2f\xb5\xd3\xdd\x47\xcc\xef\x54\xf1\x80\x16\xcc\xa2\x71\x77\x16\xb2\x57\xd0\x50\xcb\x7d\x12\x13\xa7\xf6\x55\xb8\x43\xf3\x56\x0c\x43\x82\xbf\x54\x06\xfc\x02\x04\x4b\xa3\xe3\x22\xe0\x17\x59\x8f\x9b\x3b\xdc\x59\xed\x3b\xf1\x93\x90\x4c\xc8\xf9\x18\xd6\x8d\xc7\x8e\x2a\x6a\x1f\xbf\x45\xce\x43\x36\x7d\x85\xfd\x10\xcc\xf2\xd8\x15\x7f\x4b\x1f\x87\xbd\x74\x70\xd3\xd2\xeb\x94\x10\x20\x5d\xf7\xdc\x27\xc3\x04\xca\xbb\xf0\x0c\x4d\xa1\x45\xd3\x0a\xb3\xad\x6e\xef\x00\xfc\x05\x1f\x94\xae\x69\x25\xfe\xc4\xed\xde\x13\x17\x61\x1b\x7c\x4a\xa4\xf1\x2d\x7e\x5a\xa0\xb1\x2f\xe3\x9f\x05\x56\x9e\x77\xc2\xdf\x64\x37\x54\xd3\x1a\x2d\x6a\xd7\xb5\x37\xd9\x98\xb3\x9d\x1d\xbf\x6b\xdd\x08\x8e\xf7\x5b\x9b\x9e\x36\xb4\x46\x9e\xb9\x2f\x15\x49\x2c\x3f\xee\xa5\xf1\xd3\x42\x68\x64\x4f\x7b\xda\x55\x73\x02\xde\x80\xeb\xa7\x9d\x29\x63\xc2\x79\xd2\x0a\x84\x2c\x5d\x03\x8e\x9f\x23\x89\xd5\x83\x61\x2c\x0f\xdd\x92\x13\x0d\xf8\x27\x1c\x32\x3f\x2c\x65\x2f\x05\xcb\x9e\x74\x77\xf3\x58\xc6\xd7\x4d\x28\xab\xbb\x2f\xda\xbb\x23\x5c\x24\xe1\xf2\x38\x01\x6d\x56\xc6\xf7\xab\xe6\xe4\xe0\xb3\x32\x7e\xdb\xf3\x7f\xea\xa9\xc0\xa6\xf2\xd2\xee\x72\xf7\x43\xbb\xd5\xa5\x1a\xe8\xd1\x7d\xbb\x4f\xa8\xa2\xeb\xd5\x84\x72\x82\x79\x3c\xdb\x7b\xcf\x84\xe1\xe7\xe8\xb0\xd4\x4c\xa3\xa4\xc1\x3d\xad\x75\xdb\xcf\x4a\xfb\xcf\x95\x36\xe2\xff\x59\x6a\x07\x4f\xfd\x2f\xa4\x36\xf5\xdc\xd8\x3e\x67\xa7\x9f\x1b\x4e\x01\x5f\xfa\x96\x75\x67\x4e\x79\xce\x0e\x1f\x29\x47\x1f\xb3\xfc\xe2\x59\xe9\xff\x8e\xd2\x3d\xaf\xcf\x7a\xfe\xba\xf4\xdc\x7a\xb5\xff\xb0\x91\xa4\xfd\x51\x82\x24\xfe\x27\x9c\xbf\x03\x00\x00\xff\xff\xdf\x55\xe3\x4f\xd2\x11\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 4562, mode: os.FileMode(420), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlMainCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x5d\x6e\xe2\x30\x10\x7e\xe7\x14\x23\x55\x55\x41\x25\x28\x84\x96\x55\xdd\x97\x3d\xc3\xde\xc0\xc4\x93\xd8\xaa\xe3\x89\x6c\x03\x65\x57\xbd\xfb\xca\xb1\x01\x03\xa5\x74\xb5\xf8\x25\x78\xfe\xbe\x6f\xe6\x1b\x33\x4b\xe4\xe1\xcf\x08\x00\xa0\x26\x4d\xb6\x70\xb5\xc4\x0e\x19\x68\xd5\x4a\x0f\x82\xdb\xb7\xd7\xd1\xc7\x68\xf4\xb3\x43\xa1\x38\x8c\x7b\x8b\x0d\x5a\x57\x9c\x3a\x07\xb7\x49\x4a\x93\xa7\x0c\xbf\xa2\x58\xf1\xfa\xad\xb5\xb4\x36\x22\x86\x31\xb8\x5b\x54\xe1\xbc\x66\x4e\x4e\x09\x3c\x98\xab\xe7\x70\x72\xb3\xc7\x77\x7f\x30\x0b\x21\x72\x9b\x54\xad\x1c\xe0\x32\xb8\x5b\x2e\x97\xb9\xa9\xb7\xaa\xe3\x76\xc7\x40\x3a\x3d\x9e\x57\x53\x78\x29\xef\xa7\xb0\x2c\xef\x27\xd1\xeb\xe3\x36\xb7\x21\xf3\x3f\x91\x6b\x30\x9c\xab\xe4\x96\x55\x38\x57\xc9\x55\x55\x75\x8d\x5c\x2d\xc2\xf9\x92\xdf\x8f\xc0\xef\xe9\x94\xdf\x8a\xc4\x2e\x61\xbe\x44\xbb\xe1\x76\x7c\xc9\x22\x85\x9f\xf8\x1c\x51\x26\x6b\xc7\x6d\xab\x0c\x83\x32\xfe\xed\xb9\x10\xca\xb4\xc3\xff\xe1\x42\x28\xd7\x6b\xbe\x63\xd0\x68\x7c\x8f\x3e\xe1\xab\x10\xca\x62\xed\x15\x19\x06\x96\xb6\xc9\xb9\x21\xe3\x8b\x86\x77\x4a\xef\x18\x3c\xfc\xa2\x15\x79\x7a\x98\x82\xe3\xc6\x15\x0e\xad\x6a\x06\x19\xce\x6a\xd2\x89\xca\x37\xb2\xd7\xa4\xd7\x9d\x89\x81\x61\x04\x37\x9a\x70\x9c\xd2\xe4\x8c\xd1\x1c\xbb\x78\x23\x31\x8e\xa2\xe6\xba\x1e\xcf\xcb\x72\x23\xa1\x80\x0a\xbb\x14\x40\x1b\xb4\x8d\xa6\x2d\x03\xa9\x84\x40\x03\x7c\xed\x69\xa8\xdf\x71\x65\x52\xf9\x1b\x39\x2e\x8b\x5e\x63\xda\xda\x50\x69\xfe\x35\xf7\x1c\x56\xb1\x63\x67\x88\x64\x35\x85\xf8\xb1\xc8\x5f\x81\x7d\x47\x92\xbc\x26\x79\x00\x3c\x82\x5c\x1c\xa3\x1e\x41\x3e\xa5\xd0\xa8\x87\xc2\x53\x3f\x68\x60\x1f\x32\xeb\xd0\x4b\x12\xc9\x69\x98\xf3\x36\xb5\x60\x45\x3a\xc9\x79\x10\x97\xb7\xdc\xb8\x86\x6c\xc7\x60\xdd\xf7\x68\x6b\xee\x30\xcb\x23\xd0\xd5\x56\xf5\x81\xdf\x49\x45\x06\xb3\x67\xec\xf2\x92\x9e\xaf\xf4\x61\xda\x64\x05\xda\x30\x57\xcd\x7b\x87\x43\x67\x86\xaf\xd7\xdc\xec\x7a\x5e\xef\xc5\x7b\x9a\xc5\xcb\x1c\xb9\x53\xbf\x91\x41\x39\x7b\xa9\x9e\xf7\xe3\x49\x19\x56\xe4\x3d\x75\x0c\xe6\xfd\x3b\x38\xd2\x4a\xa4\x1e\x1e\x16\x38\xcd\x77\x83\xd6\xab\x9a\xeb\x82\x6b\xd5\x9a\xd0\x83\x10\x97\x75\x21\xdd\x6b\x6c\x7c\xbc\xd5\xca\x60\xb1\x57\xcd\x7c\xb6\x3c\xd1\x49\x61\xd3\x7d\x80\x73\x86\x7c\xdf\xf3\xcf\xd3\x9e\x03\xf1\xd4\x7f\x55\xef\x64\x70\x8b\xb2\xfc\xce\x0b\x71\x05\x63\x5c\x46\xc3\x37\xff\xb1\xca\x33\x17\x4d\x97\xc3\xd1\xdc\xb6\xf8\x09\xe6\xa3\xd8\x0e\xb2\x59\x04\xd9\x84\x73\x06\xcb\xf5\x7c\x9f\xf8\xb0\x8e\xb3\xea\xa0\xb1\xe8\xc8\x93\xc7\x56\x09\x2f\x19\xcc\xcb\xf2\xfe\x6c\x83\x43\xfe\xef\xb4\x69\xb8\x10\x58\x93\xe5\x91\xad\x21\x83\x79\x25\x26\xc3\x0a\xdf\x78\xbe\x72\xa1\x7d\x8c\xfe\x06\x00\x00\xff\xff\x68\xfa\x75\x59\xda\x07\x00\x00")

func htmlMainCssBytes() ([]byte, error) {
	return bindataRead(
		_htmlMainCss,
		"html/main.css",
	)
}

func htmlMainCss() (*asset, error) {
	bytes, err := htmlMainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/main.css", size: 2010, mode: os.FileMode(420), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"documentation.md": documentationMd,
	"html/index.html":  htmlIndexHtml,
	"html/main.css":    htmlMainCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"documentation.md": &bintree{documentationMd, map[string]*bintree{}},
	"html": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{htmlIndexHtml, map[string]*bintree{}},
		"main.css":   &bintree{htmlMainCss, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
