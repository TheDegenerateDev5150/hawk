// Code generated by go-bindata. DO NOT EDIT.
// sources:
// NAME-service/cmd/NAME/main.gotemplate (429B)
// NAME-service/handlers/handlers.gotemplate (618B)
// NAME-service/handlers/handlers.methods.gotemplate (268B)
// NAME-service/handlers/hooks.config.gotemplate (59B)
// NAME-service/handlers/hooks.handler.gotemplate (251B)
// NAME-service/handlers/hooks.imports.gotemplate (92B)
// NAME-service/handlers/middlewares.gotemplate (1.393kB)
// NAME-service/svc/client/grpc/client.gotemplate (3.191kB)
// NAME-service/svc/client/http/client.gotemplate (101B)
// NAME-service/svc/config.gotemplate (305B)
// NAME-service/svc/endpoints.gotemplate (8.689kB)
// NAME-service/svc/server/run.gotemplate (3.276kB)
// NAME-service/svc/transport_grpc.gotemplate (2.967kB)
// NAME-service/svc/transport_http.gotemplate (101B)

package template

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdNameMainGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x3f\x8f\xe2\x30\x14\xc4\xeb\xbc\x4f\xf1\x94\x2a\x14\x67\xf7\x48\x54\xe4\x0a\x9a\x03\x01\xb7\xbd\x49\xc6\x8e\x45\x70\x90\xed\x04\xad\x22\x7f\xf7\x95\x03\xbb\xa2\xd8\xca\x7f\x7e\xf3\x34\xf3\x46\x4a\xde\x0e\x2d\xd8\xc0\xc1\xab\x88\x96\x2f\x9f\xdc\xa9\xc7\x55\x70\xbd\xe7\x7f\xfb\x33\xff\xad\x77\x67\x41\x52\xf2\x11\x7e\x74\xce\x3a\xb3\x70\x7e\xd8\xbe\xe7\x61\x82\x7f\x78\x1b\xc1\xb1\xb3\x81\xb5\xed\xb1\x68\x3f\xe0\x83\x1d\xdc\x9a\xe7\x59\xbc\xee\x29\xbd\x01\xae\x55\xc4\x3b\xcd\xef\x94\x88\xee\xaa\xb9\x2a\x03\xbe\x29\xeb\x88\xec\xed\x3e\xf8\xc8\x15\x15\xa5\xee\x95\x29\x89\x0a\x29\xf9\x9c\xad\x4e\xf0\x93\x6d\x40\x45\x39\xcf\x62\xb7\xe8\x0e\x2a\x76\xfc\x27\x25\x96\x61\x6a\x64\x80\x9f\xe0\xcb\xdf\x05\x9d\x72\x6d\x0f\x1f\x4a\x5a\x11\xe9\xd1\x35\x8b\x61\xb5\xe2\x79\x71\xf8\x7f\x6f\x55\x04\xab\xb6\xf5\x08\x01\x81\xad\xe6\xd8\x21\x37\x33\x81\x2f\x80\xfb\xd9\x3c\xc2\xe5\xca\x72\xbc\x40\x45\x3e\xc4\x41\xf9\x80\x6a\x45\x54\x34\xda\xf0\x7a\xc3\xcf\x28\xa2\x86\x56\x63\x1f\xb7\x83\xd3\xd6\x3c\xe1\x86\xbf\x93\x88\x13\x5e\xa4\x6a\xb4\xc9\xc3\xaf\xa9\xe3\xe8\x9e\x3f\x89\xbe\x02\x00\x00\xff\xff\xa6\x55\x21\xaa\xad\x01\x00\x00")

func cmdNameMainGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_cmdNameMainGotemplate,
		"cmd/NAME/main.gotemplate",
	)
}

func cmdNameMainGotemplate() (*asset, error) {
	bytes, err := cmdNameMainGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/NAME/main.gotemplate", size: 429, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x19, 0x81, 0xb3, 0x16, 0x98, 0x2a, 0x16, 0x86, 0xb1, 0xd0, 0x5, 0x92, 0x9e, 0x76, 0x94, 0x12, 0x0, 0x49, 0x46, 0xdc, 0x33, 0x10, 0x56, 0x65, 0xd1, 0x10, 0x32, 0xa8, 0x45, 0xea, 0xaa, 0x93}}
	return a, nil
}

var _handlersHandlersGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xdd\x6e\x14\x31\x0c\x85\xaf\xe3\xa7\x38\x5a\x8d\xd0\x0c\xda\xa6\xf7\x48\xdc\xc0\x05\x42\x82\xaa\xe2\xe7\x01\xd2\x59\xb7\x1b\xb1\x93\x84\xc4\xb3\x5b\x64\xe5\xdd\x51\x76\x87\x6a\x10\x3f\xbd\x4a\x6c\x7f\x8e\xcf\x89\x93\x1b\xbf\xb9\x07\xc6\xde\x85\xdd\x81\x73\x21\xf2\x53\x8a\x59\xd0\x93\xd9\x8c\x31\x08\x3f\xca\x86\xc8\xa4\x3b\x6c\x54\xed\xed\x9b\xf7\xe7\xf2\xad\x93\x3d\xae\x6a\xdd\xd0\x40\x74\x7d\x8d\x1b\x3e\x7d\xe6\x7c\xf4\x23\x23\xb3\xcc\x39\x14\x38\x04\xe7\x8f\xbc\x45\x11\x27\x7c\xe0\x52\xe0\xa7\x74\xe0\x89\x83\x38\xf1\x31\x20\xde\x63\x69\xb2\x74\x3f\x87\x71\xf5\x4a\x3f\x20\xdd\x59\xd5\x77\xf1\xc6\x4d\x0c\xfb\x8b\x6b\x51\xad\x2d\xe2\x0c\x25\x73\x19\x06\xd5\x2f\xf1\x43\x3c\x71\xfe\x1b\xe9\x47\xd6\x4a\x95\x48\x7e\x24\x7e\x16\x45\x91\x3c\x8f\xa2\xcd\xb2\xfd\x1a\x9e\x24\xf3\xee\xff\x6a\xda\x00\xd5\x93\x97\x3d\x3a\x61\xbc\x7a\x0d\x8b\x5a\xc9\xa8\x66\x17\x1e\x18\x9d\x6f\xb9\x4e\xf8\xa9\xfb\x23\xcb\x3e\xee\x4a\x83\xcc\xd9\x7e\x5f\x56\xea\xd6\xe4\x6f\x02\x07\xa8\x76\x7e\xc9\xf5\xa3\x3c\x62\x59\x93\x7d\x7b\x39\xb7\xf0\x01\x2f\xd7\xdf\xd7\x79\xfb\x89\xbf\xcf\x5c\xa4\xd6\x01\xfd\x9f\xb5\x92\x62\x28\x5c\xeb\x16\x9c\x73\xcc\x83\x92\x31\xe6\xe8\x32\x32\x97\x84\x7f\xe2\x8d\x5a\x36\xf0\xa2\x91\x5b\x04\x7f\x20\x63\xce\xb6\x39\xec\x6a\x25\xd5\x2b\x5c\x6e\x3f\x03\x00\x00\xff\xff\xaa\x0e\x48\xe4\x6a\x02\x00\x00")

func handlersHandlersGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersHandlersGotemplate,
		"handlers/handlers.gotemplate",
	)
}

func handlersHandlersGotemplate() (*asset, error) {
	bytes, err := handlersHandlersGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/handlers.gotemplate", size: 618, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7d, 0x27, 0xca, 0xb8, 0x3c, 0x84, 0x48, 0x83, 0x56, 0xe7, 0xcb, 0x8e, 0xf7, 0xcf, 0x4e, 0x4f, 0x2, 0x4a, 0x97, 0x52, 0x3b, 0x74, 0x1c, 0x9c, 0x1e, 0x5c, 0x1f, 0xed, 0xbe, 0xa2, 0xb6, 0x9}}
	return a, nil
}

var _handlersHandlersMethodsGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\x31\x4e\xc4\x40\x0c\x45\xeb\x99\x53\xfc\x62\x85\x12\x14\xe6\x00\x48\x54\x14\x34\x40\x01\x5c\x20\x64\x0d\x3b\x12\x78\x82\xc7\xd9\x5d\xc9\xf2\xdd\x51\x32\x54\x48\x5b\xd9\xfe\xef\xb9\xf8\xd1\x0c\xa7\xac\x07\xec\x94\x70\x7b\x87\xe4\x1e\x43\x30\x93\x91\x3f\x09\xbb\xbc\x65\x4f\xa4\x87\xb2\xaf\x1b\xfa\x58\x78\x42\x57\x61\xf6\x56\x1e\xcb\x89\x64\xfd\x4c\xaf\x24\xc7\x3c\xd1\xf3\xf8\x4d\xee\x7f\x47\x0f\xb3\xd4\x92\x6e\xd2\x33\xa6\xc2\x4a\x67\x4d\xf7\x6d\x0e\xc8\x8c\xeb\xf9\x3d\x99\x3d\x94\x55\x43\x7a\xa1\x9f\x85\xaa\xba\xf7\xe8\xfe\x93\x3a\x17\xae\xe4\x3e\x80\x44\x8a\xf4\x16\x43\x08\xc7\x51\x20\x54\x67\x5c\x90\x57\x47\x48\x17\x61\x5c\xad\xde\x00\xce\x5f\x31\x84\xd6\x91\x78\xef\x1e\xcd\x6e\xd0\xb6\xdf\x00\x00\x00\xff\xff\x7e\xf3\xcb\x3d\x0c\x01\x00\x00")

func handlersHandlersMethodsGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersHandlersMethodsGotemplate,
		"handlers/handlers.methods.gotemplate",
	)
}

func handlersHandlersMethodsGotemplate() (*asset, error) {
	bytes, err := handlersHandlersMethodsGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/handlers.methods.gotemplate", size: 268, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x77, 0x56, 0xeb, 0xd4, 0xf5, 0x43, 0x18, 0xd0, 0x79, 0xe1, 0x32, 0x9e, 0x1c, 0x6d, 0x12, 0xe5, 0x88, 0x1e, 0xab, 0xa8, 0x51, 0xf9, 0x8d, 0x70, 0xf9, 0xfd, 0xb7, 0xdb, 0x8d, 0xb8, 0xba, 0xac}}
	return a, nil
}

var _handlersHooksConfigGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\x4a\x2b\xcd\x4b\x56\x08\x4e\x2d\x71\xce\xcf\x4b\xcb\x4c\xd7\x48\x4e\x4b\x57\x28\x2e\x4b\xd6\x83\x70\x35\x91\xd8\x0a\xd5\x5c\x9c\x45\xa9\x25\xa5\x45\x79\x0a\xc9\x69\xe9\x5c\xb5\x5c\x80\x00\x00\x00\xff\xff\x13\x4d\xbb\xa2\x3b\x00\x00\x00")

func handlersHooksConfigGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersHooksConfigGotemplate,
		"handlers/hooks.config.gotemplate",
	)
}

func handlersHooksConfigGotemplate() (*asset, error) {
	bytes, err := handlersHooksConfigGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/hooks.config.gotemplate", size: 59, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6c, 0xe9, 0x3, 0xff, 0x97, 0x0, 0xf1, 0x23, 0x7, 0xfa, 0xf4, 0x8a, 0x33, 0x27, 0x13, 0x45, 0x86, 0x6a, 0xcf, 0x1, 0xf8, 0xa, 0xbd, 0x78, 0xac, 0x13, 0x3d, 0x1c, 0x24, 0x37, 0x5c, 0x33}}
	return a, nil
}

var _handlersHooksHandlerGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\x41\x6a\xc3\x40\x0c\x45\xd7\xa3\x53\x88\x40\xc1\x06\xdb\xa1\xdb\xe2\xae\x4a\x68\xbd\x68\x28\x4d\x2e\x20\x26\x72\xc6\x74\xac\x29\x1a\xb9\xc6\x94\xde\xbd\x38\x90\x85\x77\x7a\x08\xfe\xfb\x1f\xfa\x49\x3c\x76\x62\xac\x3a\x7d\xdb\x1b\xc9\x25\xb2\x16\xac\xfa\x12\x48\xd0\x07\x92\xb6\x46\x56\x4d\x5a\xe2\x2f\x38\x8f\x4f\xcf\x38\xd2\x17\x17\xeb\x0b\x53\x6e\x4e\xc3\x55\x28\x56\xf8\x58\x82\xcb\xb7\xbb\x39\x26\x1b\xfa\xa5\xf0\x15\xe6\x25\x7b\x8a\xb1\x39\x75\xaf\xdd\xf1\xbc\xe1\xf3\xe1\xf3\xbd\x04\x67\xac\xe3\x20\x64\x7c\x58\x1d\x6b\x7a\x3f\x5a\x73\x83\xbe\xd8\x3d\xe4\x5d\x85\x6d\xed\x4b\x00\xb7\xdf\xe3\x47\x24\xcf\x38\x07\x32\xfe\x61\xc5\x1c\x26\xbb\xa4\x59\x30\xac\xb5\x07\xb9\xe2\x92\x26\x9c\x49\x0c\x03\x2b\x03\xb8\xfb\x8e\xb6\xc6\xad\x08\xfe\xe0\x3f\x00\x00\xff\xff\x1c\x92\xd9\x69\xfb\x00\x00\x00")

func handlersHooksHandlerGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersHooksHandlerGotemplate,
		"handlers/hooks.handler.gotemplate",
	)
}

func handlersHooksHandlerGotemplate() (*asset, error) {
	bytes, err := handlersHooksHandlerGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/hooks.handler.gotemplate", size: 251, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbc, 0x1, 0x74, 0xe, 0xca, 0xd8, 0xff, 0xae, 0x4c, 0xdb, 0x1f, 0x0, 0x57, 0xd3, 0x18, 0x9c, 0x5, 0xea, 0xc6, 0x46, 0x57, 0x5e, 0x25, 0x5f, 0x27, 0x50, 0xa8, 0x8b, 0xb1, 0x7c, 0xd5, 0xa9}}
	return a, nil
}

var _handlersHooksImportsGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x48\xcc\x4b\xc9\x49\x2d\x2a\xe6\xe2\xca\xcc\x2d\xc8\x2f\x2a\x51\xd0\xe0\xe2\x54\x4a\xcb\x2d\x51\xe2\xe2\x54\xaa\xae\xd6\xf3\x04\x0b\x06\x24\x96\x64\x28\xe8\xd6\xd6\x2a\xe8\x17\x97\x25\x83\x64\xf2\x8b\x21\xa4\x7e\x71\x66\x7a\x5e\x62\x0e\x88\x53\x5c\x59\x9c\x9c\x98\x93\xa3\xc4\xa5\xc9\x05\x08\x00\x00\xff\xff\x28\x78\x9b\x2e\x5c\x00\x00\x00")

func handlersHooksImportsGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersHooksImportsGotemplate,
		"handlers/hooks.imports.gotemplate",
	)
}

func handlersHooksImportsGotemplate() (*asset, error) {
	bytes, err := handlersHooksImportsGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/hooks.imports.gotemplate", size: 92, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdf, 0x71, 0x4f, 0x74, 0x99, 0xdd, 0x7f, 0xb4, 0x27, 0x86, 0x99, 0xc3, 0x69, 0x15, 0xe9, 0xf1, 0x5a, 0x16, 0x3a, 0x37, 0x4, 0x35, 0x4c, 0x10, 0x77, 0x8a, 0x9f, 0xc2, 0x45, 0xb7, 0xc4, 0xc2}}
	return a, nil
}

var _handlersMiddlewaresGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xc1\x8a\xdb\x48\x10\x3d\x8f\xbe\xa2\xf0\x65\x2d\xf0\x4a\x5f\xb0\x87\xdd\x65\x60\x17\x32\x83\x61\x02\x39\x86\xb2\x54\x96\x8a\x69\x55\x2b\xdd\x25\x6b\x8c\xf1\xbf\x87\x6a\x49\x1e\x79\x42\x02\x39\xd9\xdd\x5d\xfd\xea\xbd\x57\xaf\xd5\x63\xf5\x8a\x0d\x41\x8b\x52\x3b\x0a\x31\xcb\xb8\xeb\x7d\x50\xd8\x66\x0f\x9b\xcb\xa5\xf8\x3f\xad\xf6\xa8\x2d\xfc\x79\xbd\x42\x19\x4f\xd5\x26\x7b\xe8\x0f\x60\x87\xfb\x7f\xee\x8f\x37\x59\x9e\x65\x65\x09\x5f\x02\xf6\x8f\x52\xf7\x9e\x45\x23\x60\x55\x51\xaf\x11\xb4\x25\x88\x14\x4e\x5c\xd1\x1f\x11\x48\x94\x03\x41\xe5\x9d\xa3\x4a\xd9\x0b\xf8\x23\xd0\x72\x69\x07\xd1\x83\xb6\xa8\x80\x06\x18\x49\xed\xb8\xe3\xba\x76\x34\x62\xa0\x08\x15\x0a\x1c\x08\xc6\x80\x7d\x4f\x35\x60\xf0\x83\xd4\x40\x27\x0a\xe7\x55\x1d\x6c\xa9\x68\x8a\x5d\xe2\x10\xa3\x41\x39\xdf\x34\x2c\x0d\xa0\xd4\xc0\x12\x35\x0c\x1d\x89\xa2\x31\xc8\x77\x69\xd7\x6b\x4b\x21\xde\x90\x23\x25\x82\x27\x72\xe7\xa5\x4b\xf4\x1d\x19\x16\xbd\x6b\x94\x1a\xc4\xeb\x72\x77\xee\xfa\x7e\x1e\xe8\xdb\xc0\x21\xf5\x1d\xb4\x35\xed\x15\xaa\xd1\x4e\xbc\xf2\xc2\xd0\x9e\xbd\xd2\xa4\xd9\x9c\x3a\xb2\xa0\x5b\x2b\x59\xf8\x8c\xec\x9c\x29\xb7\x22\x3f\x28\x85\xce\x47\x5d\x15\x1a\xd4\x96\x0b\x2a\x00\xfb\xde\x31\xd5\x70\xe4\x10\x35\xcf\x8e\x83\x54\xf7\xa3\xd9\xb2\x40\x3c\x55\xc5\x6d\x23\xbf\x5f\xc2\x25\xcb\x1e\xca\x12\xf6\x18\x23\xe0\x9a\xcc\xd9\x0f\x30\xa2\xe8\xad\x87\xfa\xd9\xfb\x45\x73\x91\x6e\xfa\xde\x8c\x45\xe7\xce\xd0\x1b\x08\xcb\xca\x94\xc3\x19\x04\xbb\x59\xf3\x0d\x51\xbd\xa9\xa3\xb7\xca\x0d\x35\xd5\x09\xc5\xdc\x4c\x7f\x58\x0a\x13\xf0\xb7\x73\x8f\x6f\x16\xaa\xad\xb9\xf9\x74\xa3\xb5\x83\xcd\x8b\xa2\x0e\x71\xb3\x83\xcd\x9e\xa5\xd9\xe4\x2b\x01\x2c\x80\x49\xdf\x27\x3c\x90\xa3\xfa\xe9\xf7\xe5\x7c\x6e\x29\xd2\x5d\x0c\x1b\xd2\xa4\xcc\xee\xb4\xb4\x12\x97\x94\x61\x4a\x3d\x87\x69\x04\x80\xa1\x49\x69\x83\xb1\x25\x59\x7a\x2d\xc8\x7c\xcb\xf4\x10\x27\x06\x63\x60\x25\x68\x48\x28\x70\x05\x1d\xa9\xfd\x34\x68\x11\xb3\x24\xad\x69\x24\x0b\x2b\x94\x84\x15\x28\xbd\xe0\x35\x9f\x89\xce\xd1\x07\x38\x06\xa2\xa9\x65\xc3\xda\x0e\x87\xa2\xf2\x5d\x29\xcc\xdc\x78\x5f\xb6\x38\xbe\x96\x5f\xe9\x0d\xbb\xde\x51\xb9\x6a\x50\xba\xc9\xb3\xd5\x56\xd1\xf8\x04\x38\x57\xc7\x8f\x13\x9a\x5d\x9e\x07\x45\x21\xf8\xf0\xaf\x1f\x44\x29\x6c\xa3\xa2\xc6\x7a\x5e\xe5\x3f\x9d\xda\x7f\x7e\x34\x1b\xcc\xa7\xf3\x7d\xfc\x6c\x17\x22\x4b\xe3\xe8\xc3\x84\x58\x8a\xc7\x89\xd0\x92\x62\xf8\x0b\xee\x53\xb2\xfd\xb1\xc6\x1a\x06\xd2\x21\x08\xb0\x64\xd7\xec\xfd\xad\xbc\x4c\x1f\x2c\x7b\x29\xfd\xa1\xb8\x5c\x8a\x79\xa3\x78\xc6\x8e\xae\x57\x5b\x51\xc8\x7f\x71\x06\x97\x7b\xe8\xef\x01\x00\x00\xff\xff\xab\xd4\x05\x58\x71\x05\x00\x00")

func handlersMiddlewaresGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersMiddlewaresGotemplate,
		"handlers/middlewares.gotemplate",
	)
}

func handlersMiddlewaresGotemplate() (*asset, error) {
	bytes, err := handlersMiddlewaresGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/middlewares.gotemplate", size: 1393, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x45, 0xee, 0x3c, 0x3a, 0xe4, 0x94, 0xb1, 0x24, 0x15, 0x46, 0x60, 0x23, 0x31, 0x65, 0x5a, 0xd6, 0xab, 0x9a, 0xb6, 0x8a, 0x1c, 0x88, 0xac, 0x71, 0x44, 0x18, 0x93, 0xec, 0x20, 0x61, 0x7b, 0x64}}
	return a, nil
}

var _svcClientGrpcClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x4f\x6f\xdb\x3a\x12\x3f\x8b\x9f\x62\xd6\x08\x16\x52\xa0\xd0\xf7\x2e\x7c\xa9\xd3\x2d\xba\xd8\xa6\x46\x1a\xf4\x1d\x8a\xa2\x60\xa8\x91\x4c\x58\x26\x55\x92\xb6\x13\x08\xfa\xee\x0f\x43\x52\x8e\x9c\x3a\x7e\x3d\x18\x16\x39\xc3\xf9\xf3\xfb\xcd\x70\x38\x9f\xc3\xd2\x54\x08\x0d\x6a\xb4\xc2\x63\x05\x8f\xcf\xb0\x16\x87\x0d\x87\xdb\x2f\x70\xf7\xe5\x01\x3e\xdc\x7e\x7a\xe0\x6c\x3e\x87\x7b\xb4\x3b\xad\x95\x6e\x82\x1c\x0e\xaa\x6d\xc1\xec\xd1\x1e\xac\xf2\x08\x7e\xad\x1c\xd4\xaa\xc5\xa0\xfb\x0d\xad\x53\x46\xbf\x83\xbe\xe7\xe9\x7b\x18\x26\x02\xb8\x15\x1e\xa7\x52\x5a\x0f\x03\x23\x95\x95\x90\x1b\xd1\x20\x34\xb6\x93\xd0\x59\xb3\x57\x15\x3a\x10\xd0\xdc\xaf\x96\x20\x5b\x85\xda\x43\x6d\x2c\xf8\x35\x92\x81\xaf\x68\xf7\x4a\x22\xbf\x13\x5b\x1c\x06\x70\x69\xc9\xba\x89\x19\xc6\xd4\xb6\x33\xd6\x43\xce\xb2\x99\x34\xda\xe3\x93\x9f\xb1\x6c\xd6\x18\xd3\xb4\xc8\x1b\xd3\x0a\xdd\x70\x63\x9b\x39\x69\xbf\x2d\x99\x6f\xd1\x8b\x4a\x78\x11\x54\x94\x5f\xef\x1e\xb9\x34\xdb\x79\xb7\x69\xe6\x68\xad\xb1\x6e\xc6\x4e\x25\x8d\xb9\xd9\x28\x3f\xa7\x1f\xea\xaa\x33\x4a\x93\x63\xb2\xe5\xad\xd0\x2e\x04\xf5\x86\xfe\x51\x21\x05\xc5\xb2\xf9\x1c\x1e\x08\xe6\x94\x32\xcb\x66\x7d\xcf\x3f\x85\xcc\x56\xc2\xaf\xe1\x66\x18\x60\xee\xf6\x94\x40\xf7\x08\x24\x5c\xbd\x3f\x15\xcf\x58\x11\x30\xbe\xc3\x03\x58\xf4\x3b\xab\x1d\x08\x3d\x82\x06\x8f\x42\x6e\x62\x09\x9c\xc2\x2d\x8d\xd6\x28\xbd\x32\x9a\xc3\x27\x0f\xca\x11\xf8\x64\xc7\xa2\xeb\x8c\x76\xea\x51\xb5\xca\x3f\x83\xa9\x03\x2b\x52\xb4\x2d\x5a\xf0\x06\x2a\x25\xda\x12\x84\xae\xa0\x15\x1e\x2d\xc8\xd6\x38\x2c\xa3\xd2\x8b\x4d\x56\xef\xb4\xa4\x98\x72\xda\x84\x6b\xca\x97\x2f\x83\xeb\xa5\xd1\xba\x04\xd3\x91\x9e\x03\xce\xd3\xf6\x97\xb0\x51\x40\xde\x3d\xf2\xdf\x6a\x80\x56\x68\x4b\x08\x8c\x14\xd0\xb3\x6c\x2f\x2c\x48\x99\xb2\x59\x1a\x5d\xab\x86\xb1\x8c\x8a\xe8\x67\x09\x35\xbc\x5b\x80\x15\xba\xc1\xa3\x9f\x9e\x65\x19\x5a\x4b\x82\x3a\xff\xb7\x94\x05\xcb\x32\x55\x93\x41\xf8\xd7\x02\xb4\x6a\x83\x46\x16\x11\xa4\x75\x72\xe6\xf8\x5f\x56\x74\x39\x5a\x5b\xc2\x4c\x0a\xad\x8d\x07\xd1\x75\xed\x73\xb2\x3c\x23\x43\x03\xcb\x06\xc6\x32\x39\x49\xc4\x91\xa7\xef\x3f\x4e\xca\xe2\x24\x53\x72\x77\x4e\xfa\x1e\x6b\x63\x31\xa7\x60\x52\x59\x7f\x13\xed\x0e\xdd\x83\xf9\x78\xbf\x5a\x7e\x4e\xd5\x9a\x4b\xc9\xd7\x28\x2a\xb4\xae\x28\x4a\x72\x9f\xf5\xfd\x0d\x1c\x94\x5f\xc3\x95\x47\x72\xce\x87\x81\x65\x93\xdd\x6e\xd3\x10\x98\x24\xba\xf2\xc8\x53\x4f\x46\x7c\xc9\x1b\x69\x46\xcc\xae\xd4\xa8\x34\xb2\xf0\x19\xfd\xda\x54\x2e\x2a\x06\xec\xfb\xfe\xc1\xfc\xdf\x1c\xd0\xc2\x95\x4a\x24\x7d\x48\xdd\x00\x63\x5b\xf0\x71\x27\x9c\x0a\xf8\x92\x9b\xb7\x0f\x2e\xe0\x14\x91\x3b\x3c\x44\x50\xf2\x78\x96\x10\xd1\x65\xfa\x9e\xf5\xfd\x98\xd3\x30\xf0\xbe\x9f\xc6\x1b\x37\x67\x53\x55\xf5\x7a\xf3\x83\x96\xa6\x42\x02\x75\x22\xbd\xc7\x5f\x3b\x74\x7e\xd4\xb9\xc5\xb3\x3a\xa1\x43\x70\x54\x0a\x05\xfb\xd1\x04\x70\xaf\x14\x1f\xc5\xc3\xd0\x0f\xa3\xca\x49\x65\x70\xce\xd3\x7e\x71\x44\x28\x2f\xc2\x4e\x22\x02\x75\x95\xc8\x4b\x5f\xe3\x07\x03\x80\x23\xbc\xa1\xc4\xdc\x5e\x12\x4c\xa3\x1d\x47\x86\xfa\x7e\xca\xe3\x6b\x12\xe9\xd2\xa0\x66\x18\x4f\xf0\x49\x6a\x13\x26\x2e\xf0\x34\x89\x67\x6c\x98\xa3\xb5\x92\x7a\x87\xc5\x6b\x9f\x70\x83\x48\x20\x44\x24\xd9\xe5\xd0\xe2\x40\xb9\x08\x3a\xdd\x54\x02\x4e\x2f\x52\x1e\x4f\x8c\x2a\xff\xa5\xab\xc7\xaf\x45\xb8\xe4\xf6\x68\xbd\x03\x41\x76\xc3\xf5\x77\x26\x2d\xb0\x48\xfd\xec\x0d\x08\xd8\x39\xb4\x37\x95\xd9\x0a\xa5\xdf\x50\x8d\x3e\x38\xac\xac\xda\x0a\xab\xda\x67\x3a\x53\xef\x5a\x50\x1a\x44\xba\x8f\xd2\xf5\x77\x31\x91\xfc\x27\xa4\xfe\xe6\xcb\xf8\x5f\x86\xea\xbf\x0f\xc1\x28\xed\xd1\xd6\x42\x62\x3f\x14\x90\x4f\x56\xd3\x3b\x30\xc6\xfd\x6e\xf1\x72\x8e\xe7\xd7\x6f\x56\x63\x71\x24\x2b\x9c\x1b\x89\x3a\x52\xf9\x8a\xb0\xd8\x1e\x7f\x44\xd8\xa5\x4e\x3a\xcb\x57\x3c\x90\x34\xde\xa2\xeb\x9f\xa9\x88\x0e\x02\x6f\x17\xb8\x0d\x5a\x7f\xc4\xd7\xa5\x3c\xce\xd1\x35\x46\xf0\x87\x64\xfd\x0a\x53\x29\xc5\x73\x86\xa8\x20\x38\xe5\xe9\xd7\x6f\x2c\x31\xff\xdc\xe1\xc9\xd8\x03\xe7\xed\x4e\x7a\xf2\x91\x26\x02\x7c\xff\xe1\xbc\x55\xba\x49\x7d\x38\x1d\x3b\x91\x0f\x4a\x37\xac\x02\xee\x5b\x53\xa9\x5a\xa1\x8b\x43\xfc\xf8\x3e\xa0\x91\x1a\xbc\x9d\x9c\xa7\xa3\xf9\xf5\x34\x80\x22\x66\xc9\x22\x88\x4b\xff\x34\x0e\xac\xaf\xa8\xab\x7c\x83\xcf\x61\xca\xc7\x88\x8a\x53\x63\xfd\x31\xd7\x60\xd6\xc0\x39\xc3\x61\x32\x9b\x71\xdc\xc1\x02\xc8\x24\x9b\xce\x6a\x9a\x7f\x43\xf2\x7f\x69\x68\x86\x58\x46\x70\x0a\x38\x37\x7e\xa7\x45\xf9\x2a\x3a\xe9\x9f\x7e\xaf\x81\x6d\x05\xd7\xe3\x13\x92\x7f\xbe\x2d\x5e\x6b\x84\xe0\x69\x60\x76\x42\x4d\x99\xc9\xc6\xb7\xca\xe6\xe5\xad\x12\xc2\x0b\x63\x52\xd5\xb0\x2f\xc1\x04\x99\xf4\x4f\x3c\x64\x93\x6f\x0a\x9e\xa7\xd8\xff\x43\xc2\x38\x51\xa3\xe1\x05\xbd\x4a\x08\xef\xb0\x2c\x61\x53\xc2\x3e\xcc\x94\x21\xbc\x4f\xe2\x6b\x27\xaa\x4e\xdf\x3b\xd7\xdb\x0a\x16\x70\x4c\xe0\x7f\x46\xe9\xfc\x7a\x5b\x95\x2f\x5b\x2b\x3a\x13\xad\x72\xce\x8b\x62\x34\x97\x90\x91\xfe\x29\xa2\xff\x77\x00\x00\x00\xff\xff\x8b\x8c\x74\x6f\x77\x0c\x00\x00")

func svcClientGrpcClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcClientGrpcClientGotemplate,
		"svc/client/grpc/client.gotemplate",
	)
}

func svcClientGrpcClientGotemplate() (*asset, error) {
	bytes, err := svcClientGrpcClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/client/grpc/client.gotemplate", size: 3191, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe1, 0x9c, 0x1e, 0xf9, 0xb2, 0x33, 0x92, 0xf4, 0x36, 0x92, 0x5e, 0xbc, 0x90, 0xf6, 0xad, 0x67, 0x85, 0xc4, 0x65, 0xd0, 0x49, 0x51, 0x6d, 0x79, 0xcc, 0xd1, 0xa4, 0x63, 0xb, 0xf3, 0x0, 0x2e}}
	return a, nil
}

var _svcClientHttpClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\xb1\x0d\x02\x31\x0c\x05\xd0\xfe\xa6\x70\x7d\x12\xf1\x10\x34\x57\x22\x91\x05\xa2\xe3\x13\x45\x98\x38\x72\x4c\x15\x79\x77\x9a\x1b\xe0\xad\xc5\x3b\x3d\x01\xaa\x7a\x73\xfb\xcd\xc9\x15\xbd\xea\xa7\x39\xbb\x95\x3e\x87\x9a\xb3\xe3\x3b\xa4\x38\x52\x55\x7a\xab\xd1\xa9\x2f\xd0\xce\x11\xdb\x5a\x67\x11\xa1\x74\xe4\xfc\x38\x20\x03\x96\xee\xd2\xd0\x3d\x5f\x84\x52\xc4\xf6\x0f\x00\x00\xff\xff\x91\xf9\xeb\xcf\x65\x00\x00\x00")

func svcClientHttpClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcClientHttpClientGotemplate,
		"svc/client/http/client.gotemplate",
	)
}

func svcClientHttpClientGotemplate() (*asset, error) {
	bytes, err := svcClientHttpClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/client/http/client.gotemplate", size: 101, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x40, 0x41, 0x75, 0x36, 0x9e, 0x81, 0x78, 0xeb, 0xda, 0xcd, 0xf, 0x4a, 0x1f, 0x51, 0x17, 0x28, 0xe8, 0x81, 0x8b, 0x41, 0xe5, 0xbc, 0xb6, 0x5e, 0x47, 0x2d, 0xe, 0xdc, 0x57, 0x7b, 0xb5, 0xc7}}
	return a, nil
}

var _svcConfigGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\xc1\x4a\x43\x41\x0c\x45\xd7\x2f\x5f\x11\xba\xd2\x85\x9d\x6f\x90\xaa\x75\x59\x4a\x7f\x60\x3a\x93\x37\x2f\xd4\x66\xc6\x24\x53\x10\xf1\xdf\x65\x90\xb7\x52\x30\x90\x45\xc8\xb9\xf7\x72\x5b\x4c\x97\x58\x08\xed\x96\x00\xf8\xda\xaa\x3a\xde\xc1\xb4\x29\xec\x4b\x3f\x6f\x53\xbd\x86\x52\x1f\x2e\xec\x61\xac\x6b\x14\x1b\x4c\x58\xdc\xdb\x06\xee\x01\x42\xc0\x5d\x95\x99\x0b\xa6\x2a\x1e\x59\x0c\x7d\x21\x54\x7a\xef\xac\x94\x71\x66\x7a\xcb\x86\x73\x55\xd4\x2e\xc2\x52\x30\xa2\x91\xde\x48\xc1\x3f\x1a\xad\x6a\x73\xed\xc9\xf1\x13\xa6\xd7\xd3\xe9\xf0\x98\xb3\xe2\xef\x31\x57\x96\x02\xd3\x13\x9d\x7b\xf9\x9b\x59\x91\xfd\xf1\xb0\xfb\xc7\x65\x4f\x42\xca\x69\xe4\x1d\xc9\x5a\x15\xa3\x67\x49\x35\x93\xe2\xa8\xb7\xfd\x39\xd6\xd7\x4b\x97\x04\x5f\xf0\x1d\x00\x00\xff\xff\x22\x60\xfa\x2e\x31\x01\x00\x00")

func svcConfigGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcConfigGotemplate,
		"svc/config.gotemplate",
	)
}

func svcConfigGotemplate() (*asset, error) {
	bytes, err := svcConfigGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/config.gotemplate", size: 305, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbc, 0x42, 0xb6, 0x56, 0xec, 0x8d, 0xd5, 0xc3, 0xa4, 0xd1, 0xd3, 0xb3, 0xd9, 0x90, 0x88, 0x46, 0x5d, 0x3, 0x9a, 0x74, 0x97, 0x1e, 0xd8, 0x3c, 0x96, 0xcb, 0x60, 0x8d, 0x98, 0xf, 0x80, 0xc3}}
	return a, nil
}

var _svcEndpointsGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xdb\x6e\xdb\x48\x12\x7d\x16\xbf\xa2\x46\xc8\x22\x52\xc0\xd0\xb3\xaf\x0e\xfc\xb0\x9b\x64\x26\x01\x36\x17\x8c\x33\x9b\x87\x20\x08\x5a\x64\x49\x6c\x98\xec\xe6\x74\x37\x2d\x7b\x09\xfe\xfb\xa2\xfa\x42\x35\x45\x4a\x76\x66\x80\x59\x60\x31\x06\x12\x5b\x7d\xa9\xae\x3a\xe7\x54\xf5\x45\x17\x17\xf0\x52\x16\x08\x3b\x14\xa8\x98\xc1\x02\x36\xf7\x50\xb2\xfd\x4d\x06\xaf\x3e\xc0\xfb\x0f\x9f\xe0\xf5\xab\xb7\x9f\xb2\xe4\xe2\x02\x7e\x41\xd5\x0a\xc1\xc5\xce\xf6\xc3\x9e\x57\x15\xc8\x5b\x54\x7b\xc5\x0d\x82\x29\xb9\x86\x2d\xaf\xd0\x8e\xfd\x37\x2a\xcd\xa5\xb8\x84\xae\xcb\xfc\xdf\x7d\x1f\x75\xc0\x2b\x66\x30\xee\xa5\xcf\x7d\x9f\x24\x0d\xcb\x6f\xd8\x0e\x41\xdf\xe6\x09\x8d\xff\x14\xcc\x42\x2e\x85\x61\x5c\x68\xa8\xd1\x94\xb2\xd0\x60\x24\xd4\xec\x06\x81\x8b\x82\xdf\xf2\xa2\x65\x15\xa0\x28\x1a\xc9\x85\xd1\xb0\x55\xb2\x06\x8d\xea\x96\xe7\xa8\x53\xb2\xa4\xf0\xb7\x16\xb5\x01\x26\x0a\x50\xa8\x1b\x29\x34\x82\xb9\x6f\xd0\x5a\xa2\xa1\x14\x84\xd4\x78\xb0\x92\x02\xd3\xb0\xc7\xaa\xa2\xdf\x28\x72\x59\xa0\xd2\x64\x80\xec\x15\xe8\x3f\x6f\xa5\xf2\x13\xad\xb5\xd4\x36\x30\x02\x67\x0b\xb2\x55\xa0\xdb\xa6\x91\x8a\xa0\x35\x8a\x09\x4d\x7f\xd3\x72\x9c\x55\xfc\x3f\xcc\x70\x29\xc8\xda\x56\xaa\x9a\x19\x9d\x25\x09\xaf\xed\x88\x55\xb2\x58\x6e\x6b\xb3\x4c\x16\x4b\x8a\x1c\xef\xec\x9f\x02\xcd\x45\x69\x4c\xb3\x4c\x00\x20\xb2\xb7\xdc\x71\x53\xb6\x9b\x2c\x97\xf5\xc5\x4e\x3e\xbf\xe1\xe6\x82\xfe\x0d\x03\xfc\xa4\x64\x71\x62\x60\x08\x99\x86\x34\x1b\x58\x76\x5d\xf6\xf1\x9f\x6f\xad\x27\x1f\x99\x29\xe1\x79\xdf\x2f\x93\xb5\x65\xe4\xf5\x80\x71\x2e\xab\x0a\x73\xa3\x43\xb0\xa6\x8c\xb0\x03\x53\x32\x03\xb9\xac\x1b\x42\x86\x09\x60\x45\x11\x08\xc9\xe0\xad\x79\xaa\xc9\x58\x8d\x4c\x18\xc2\x7f\x83\xd0\x6a\x2c\x08\x68\x06\x25\x56\x0d\x2a\xd0\x46\xb5\xb9\x49\xa9\xdb\x2f\x35\xbf\x12\x17\x46\x02\x23\x73\x9a\x8b\x5d\x85\xd0\x30\xc5\x6a\x34\xa8\x48\x8b\xd4\xfe\x56\x00\x73\x14\xab\x14\xb8\x79\xaa\x69\xb1\x6d\x5b\x59\xaa\xb6\xad\xc8\x89\x06\xef\xb2\x40\x62\x4a\x82\x6c\x6c\x42\x80\xa4\xb9\x0d\xaa\xe7\x61\x41\x32\xb8\x61\x9a\xeb\x0c\x7e\x92\x0a\xf0\x8e\xd5\x4d\x85\x29\xdc\xcb\x16\x6a\xbe\x2b\x0d\x34\x4c\x93\x4c\x22\xa8\xc8\xc1\x61\x21\xb7\x4e\xa3\x64\xd1\xe6\x68\x61\x60\x02\x88\xa0\xec\x0d\x13\x45\x45\x3e\xee\xb9\x29\x01\x59\x5e\x7a\xb5\xc3\x2a\xac\xbe\x86\x3d\x57\x58\x40\xdb\x38\xa3\xba\xc1\x9c\x6f\x79\x0e\x0d\x33\x65\x06\xab\xb7\xd6\x3f\xae\xc9\xfe\x86\x6d\xaa\x7b\x60\x50\x73\x6d\x5c\xa6\x40\x81\x9a\xef\x04\x4d\xe5\xe2\x56\xde\xa0\x85\xf2\xda\xd1\x32\x64\x96\x75\x11\xc7\x64\x3b\x32\xc8\x44\x40\x32\x5b\xc7\xe8\xe6\x15\x47\x61\xc6\xe8\x46\xc4\x1d\x92\xb4\xba\xa7\x54\x76\xe6\xb0\x38\x47\x23\xa5\x93\xc3\x8a\x13\xc2\x35\x3a\x59\x1d\xfc\xe5\xc2\xa0\xda\x32\x12\xd4\x3c\x13\x64\x6c\x58\x6c\xbe\x50\xb4\xb4\x18\x8c\x13\x25\x7b\x8f\xfb\x97\x3e\x9e\x5c\xd6\x1b\x2e\x2c\x4e\xb5\x77\x31\x22\x36\xf5\xe5\xc4\xb4\x4a\x00\xb7\x4a\x26\x07\x73\x56\x55\xa8\x9c\x98\xbd\xb3\x59\x62\xc3\x99\x00\xda\xd9\x4c\x6e\x36\xd9\xaf\x62\x88\x12\x8b\xae\xfb\x59\xbe\x67\x35\x42\x16\xa6\xd3\xa7\xbe\xbf\xb6\xc8\xdb\x29\xe4\xa8\xfb\xf8\xa1\x71\xf2\x05\x80\x9a\x35\x5f\xb4\x51\x5c\xec\xbe\x7e\xf9\x3a\x04\x95\xc5\xe3\x86\xc9\xbf\xb8\x82\xf8\x2a\xd4\xb1\x78\xf2\x61\xaa\xeb\xf6\x63\x7f\x6a\x45\x1e\xcd\x77\x45\xf4\x75\x28\x8c\xb3\xf3\x5d\x6f\x18\x3b\x32\xe0\xd5\x4e\x6d\xd6\xf9\xd8\x00\xe5\xca\xca\x72\x11\xa6\x7e\xa6\x6d\x46\xa5\xf0\xcc\xb7\x5a\x87\xd6\x49\xd2\x75\x8a\x89\x1d\xc2\x13\x0e\x97\x57\x07\xbc\xde\x39\x2d\xf7\x7d\xb2\xe8\xba\x27\xdc\xe3\x17\xe0\xa7\xd5\x82\x06\xb2\xd0\x98\x74\xdd\x73\x6a\xed\xfb\xa4\x4f\x12\xf2\x00\xde\xe3\x7e\x60\x6c\xb5\x8e\xd8\xeb\x92\x85\x67\x7d\x68\xeb\x92\xc5\x62\x42\xca\xa5\x8b\xeb\x06\x57\x8f\xa0\x66\x9d\x7a\x13\x47\xd4\x5c\x4e\x4d\x9c\x21\x28\xb2\x32\x26\xe8\xf2\x8c\x95\x29\x4d\x83\x99\x98\xa6\x4b\x98\x8b\xe7\xb1\x64\x91\x49\x8b\x6d\x5c\x59\x1e\x41\xa0\xa5\x62\x15\x25\xcf\x1a\x22\x4e\x57\xb9\xb9\x03\xbf\x47\x66\x2f\xdd\xef\x94\x0a\xd5\xb3\x66\x93\x0d\x89\xf4\x84\x07\x37\xfa\x7e\x0d\xab\x69\x9f\x73\xbc\xef\x53\x40\xa5\xa4\x5a\x13\xc5\x8b\x70\x50\xb0\x8d\xe4\x1e\x66\x33\x6a\x22\x0f\x68\xc5\x75\xb2\x58\xf0\xad\x1d\xfa\xc3\x15\x08\x5e\x59\x1b\x41\x28\x82\x57\xd6\x4c\xb2\x58\xf4\xc9\xd0\x1a\x56\xc8\xce\xb8\xb4\x4e\x69\x32\x61\xd7\x75\x4e\x9f\x84\xe0\x3b\x2a\xe9\x31\x8c\x76\xd3\x78\x62\xd0\xc2\xe8\x84\x1f\x23\xfb\xc4\xe0\x1c\xb8\x0e\x5d\x32\x36\x17\x99\x06\xeb\x55\x3c\x37\xae\x44\xeb\x69\x16\x8d\x62\xb6\xca\x98\xe5\x27\x1c\xc7\x86\x1a\xde\x11\x2d\xc3\xc1\x2c\x6a\x76\xd8\x47\xa4\x90\xf5\xdf\x28\x22\x6f\x63\x0e\xba\xc0\xb4\x1d\x7e\x3b\xd0\xa7\xb3\x23\xe1\x58\x47\xdc\xa8\x19\xe6\xe6\xb8\x73\xec\x0d\x3d\xb7\x9e\x1b\xd7\x6c\x41\x77\x14\xc5\x54\x7d\x56\xac\xf9\x47\x55\xbd\xbe\xcb\xb1\x31\xb0\x57\xac\xd1\x6e\x77\x1f\x40\xdb\x72\xac\x0a\x3a\xda\xf8\x6d\xe1\x50\x69\x2c\xab\x76\x5b\x9c\x39\xaf\x65\xef\x78\x51\x54\xb8\x67\xca\x9d\xbb\x7f\xd5\xe1\x24\x4e\x67\xd0\xa6\xa9\xee\x69\x77\xa3\x1d\xdb\x90\xf1\x7a\x18\x6d\x8f\x24\x78\x8b\xea\x7e\x60\x90\x52\x86\x36\xaf\x70\x48\x23\x7b\xae\x2e\xd1\xa6\x9d\x46\x7b\x66\xce\x04\x1d\xd8\xe8\x98\x83\x05\x4d\xdb\xdc\x83\x20\xe8\xdd\x41\x0e\xef\xf2\xaa\x2d\xb0\x70\x87\xf0\x0d\x92\x0b\x14\x73\x83\x45\x36\x41\x63\x75\xf0\x29\x85\xe5\xb5\x61\xa6\xd5\xcb\x14\x96\x1f\xb9\xd8\x2d\xd7\x49\x48\xfd\x67\x51\xee\x9f\x9a\x0f\x33\xa8\xa4\x07\x6f\xb2\x2c\x73\xf5\xca\xaa\x88\x0b\xdf\x7c\x79\x15\xef\x3b\x0e\xfe\xae\x27\xfa\x69\x3b\x78\xa8\x34\x2d\x16\xcb\x48\x51\xcb\x4b\xe8\xfa\xd4\x4f\x75\xf4\x2f\xfa\x24\x59\x10\x1b\xdf\xc8\x15\xab\x5a\x6b\x72\x70\xab\x73\x45\xe3\x5b\x0a\xf2\x86\xba\x83\x63\x5f\xf0\xee\xeb\x0b\xf8\x41\xde\x38\x29\x36\x4c\xf0\x7c\xb5\xad\x4d\x76\xdd\x28\x2e\xcc\x76\xb5\x7c\x1d\x4c\x0c\x0c\x3e\xfd\x9b\x7e\x0a\x85\x44\x0d\x42\x1a\xc0\x3b\xae\xcd\x0b\xd0\x88\x31\xf1\x83\x76\x74\xb6\x93\x4b\x72\x6a\xbd\xf6\x25\xa9\xc0\x0a\x0d\xae\x82\x07\xb6\xef\x10\x00\x17\xf9\xc1\xfd\x01\xbe\xc7\x03\xc5\xb7\xd6\xc4\xd5\x15\x8c\x20\xf3\x99\x36\x5b\x58\xe1\x2a\xf2\x7c\x35\x3b\x64\x1d\x52\x6f\x04\xb9\x4b\xbb\x7f\xb1\x0d\x56\x58\x1c\xd4\xe0\x2e\xad\x3b\x34\x41\xbb\xf1\x45\xc2\x49\x78\x5f\xa2\x18\x7a\x65\x24\x57\x6f\xcc\xa9\x2e\x75\x59\xe6\x13\xa1\x75\x83\xc1\xdd\x84\x99\xbb\x4c\xf3\x9c\xce\xd3\x8a\xe7\xee\xa2\x13\xf9\x50\xf2\xbc\xb4\x53\x35\x8a\x39\x17\xfc\x21\xd2\xcf\x0e\x47\x68\xa9\xfc\x11\x72\x1a\x95\xad\xb2\x4e\xc0\xe9\xb4\x20\xcf\xd4\xe8\xe4\x54\x5c\xbf\xbb\x36\x4d\x9c\x4a\x7d\x9c\x16\x71\x85\x39\xf2\x5b\x77\xd9\xb0\x21\x1e\xdd\xe1\x32\xb8\x46\x9c\x35\x63\x7b\xc2\x25\x68\x5c\x46\x49\x93\x05\x1a\xc6\x2b\x7b\x63\x09\x09\x65\x6f\xd3\xfe\xa6\xc5\x2a\x6e\xee\xb3\x73\x45\x64\x14\x7d\x5c\x4b\xbe\x1b\xd3\xbf\x2a\xcd\xff\x4f\xa5\x19\x4d\x4b\xe7\x0f\x7d\xe7\x0a\x8f\x17\xd7\x67\x6e\xca\x37\xc6\x34\x6e\x17\x3d\x93\x61\x28\x8c\xba\xa7\xa4\xd8\xf2\x0a\x0b\x78\x33\xb9\xda\x9d\x4f\xbe\xf9\xdb\xc4\x63\x0e\x04\xee\x26\x0f\xd2\x2f\xf3\x3f\x3f\x13\xcc\x21\xb6\xd2\x51\x50\xdf\x79\x46\x78\xd0\xde\x09\xec\xfe\x4a\xe6\x3f\x21\x99\x6f\xd9\x41\x79\x27\x5f\x2b\x6c\x94\x32\x44\x89\xd9\xe4\x86\xfd\x85\x8b\xfc\xeb\x0b\x08\x01\x07\x83\x57\xa4\x76\x14\xc5\x4a\xa6\x10\x13\x6e\x9d\x06\xac\x34\x1e\x8f\xb7\xb7\xda\x53\x7e\xa4\xf0\xf7\x75\x34\xfc\xcb\x8f\x5f\xe1\x6a\x64\xd7\x63\x71\xca\x41\xb8\x0a\xa1\x8e\xab\xc4\x58\xa0\xbe\x38\x48\x81\x7f\x46\x6d\x98\xae\x7f\x22\xd5\x4e\xa7\xd8\xd1\xf4\x41\x51\x61\xe3\x7c\x44\xaa\xad\xfd\x13\xd8\xa3\xd4\x40\x03\x1f\xd2\x43\x70\x22\x88\x02\xfc\xcf\xc3\xca\xa0\x51\x83\x36\xa6\xd3\x4e\x79\x75\x18\x4b\x3f\x23\x08\x87\x9e\x3e\x39\xfc\x7f\xd6\xe9\x48\x28\x4e\x25\x3f\xa3\x99\x72\xee\x2e\x9f\xee\xe5\x7d\xde\x29\x60\x5a\xcb\x9c\xdb\xaf\x74\xac\x1a\xa8\x8c\xef\xf8\x2d\x8a\xc3\xd1\x25\x99\x79\x58\x99\x5b\xee\x98\xd7\xf5\x49\x28\x6c\x89\xdc\x86\x08\xbe\x87\xa5\xe1\x42\x1d\xa5\x49\x68\x7a\x20\x33\x7f\x5c\x7b\xa8\xae\x9d\xef\xe3\xd7\x33\x02\x82\xef\x08\x2b\x38\xf3\x68\x06\xee\x61\xf7\x2c\x34\xb3\xe6\xa7\x9a\xf7\x5f\x0c\x9d\x5b\xcd\x6e\x25\x0e\x95\xa3\xa7\xbe\x91\x10\xbc\xa5\xb1\x10\x8e\xa2\x0b\x4a\x20\x7a\xcf\xc5\xf7\xc7\xe4\xf0\x50\xcc\x5b\x56\x55\x1b\x96\xdf\x9c\x0f\xfa\x9c\x7f\x4e\x38\x3e\xe2\xb1\x70\x4e\x42\x74\x2c\x9d\x80\x57\x24\x9d\xe0\xd8\xb1\x42\x46\x2f\xa3\xb3\x12\x99\xbe\x88\x7e\x97\x46\x46\x0b\x4c\x01\xf3\xdf\x26\x9e\x5d\x6f\xa4\x92\xf1\x53\xee\x48\x26\xde\xd6\xb1\x4c\xc6\x21\xce\xeb\x64\x26\xc8\x3f\x2a\x94\x07\x02\x9f\x51\xca\x5c\xe4\x67\x5d\x74\x5a\xf1\x61\x1f\x6b\xe5\x14\x50\xc7\x62\x09\xa8\x3d\x28\x96\xe8\xfd\x3b\x12\x4a\xde\x6a\x23\x6b\xfb\x3d\x06\xc4\x23\xc6\x1a\x01\x2e\xb4\x41\x66\x6f\xcf\xfe\x9b\xa6\x12\xa1\xc0\x2d\x6b\x2b\x43\xfb\xfc\x39\x11\x45\x66\xa7\x38\x96\xae\x13\x1e\xfd\xf6\x7e\x10\x53\xfc\xa0\x3f\x12\x92\xb7\x39\x16\x52\x1c\x5c\x2c\xa2\x49\xe4\xee\x7b\xf0\xef\x11\xcb\x99\x00\xd7\x8f\x0e\xcc\xab\xa1\x0c\x5f\x9d\xc6\x6a\x98\x8f\xf4\x58\x09\x21\xec\x48\x09\x82\x57\x1e\x85\x37\x4c\x1f\xa3\x90\x97\x98\xdf\x68\x3a\x87\x9c\x96\x01\xd7\xbf\x37\x91\xa6\x0b\x4e\xb1\xd9\x48\x69\x5f\xa8\xbf\x3d\x26\xdc\x21\x28\x49\xc2\xfe\x6f\x00\x00\x00\xff\xff\xd5\x69\x87\x00\xf1\x21\x00\x00")

func svcEndpointsGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcEndpointsGotemplate,
		"svc/endpoints.gotemplate",
	)
}

func svcEndpointsGotemplate() (*asset, error) {
	bytes, err := svcEndpointsGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/endpoints.gotemplate", size: 8689, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x24, 0xf9, 0x55, 0x27, 0xb, 0xcd, 0xf3, 0x53, 0x6d, 0x9b, 0xbd, 0x31, 0x81, 0x6, 0xcb, 0x89, 0x32, 0x3, 0xc4, 0x9, 0x88, 0xec, 0x0, 0x4f, 0xaf, 0x3f, 0xad, 0x25, 0xaf, 0xdb, 0x65, 0xa7}}
	return a, nil
}

var _svcServerRunGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\xcd\x6e\xdb\x38\x10\x3e\x8b\x4f\x31\x15\xba\x0b\x19\x70\xa9\x02\xbb\xdd\x43\xb6\x3e\xb4\x71\x9a\x06\x68\x52\xc3\x71\xbb\xc7\x05\x2d\x8d\x64\x22\x12\x29\x90\xb4\xdc\x40\xf0\xbb\x2f\x86\xfa\xb1\xdc\xc6\x6e\xba\x39\xc4\xa2\x66\xf8\xcd\xff\x37\x8a\x63\xb8\xd4\x29\x42\x8e\x0a\x8d\x70\x98\xc2\xfa\x11\x36\x62\xf7\xc0\x61\xfe\x19\xee\x3e\xaf\xe0\x6a\x7e\xb3\xe2\x2c\x8e\x61\x89\x66\xab\x94\x54\xb9\x97\xc3\x4e\x16\x05\xe8\x1a\xcd\xce\x48\x87\xe0\x36\xd2\x42\x26\x0b\xf4\xba\x5f\xd1\x58\xa9\xd5\x05\x34\x0d\xef\x9e\xf7\xfb\x91\x00\xe6\xc2\xe1\x58\x4a\xe7\xfd\x9e\xb1\x4a\x24\x0f\x22\x47\xb0\x68\x6a\x34\x8c\xc9\xb2\xd2\xc6\x41\xc4\xa0\xfb\x0b\xb3\x42\xe4\xe1\xe1\xa8\xed\xe8\x90\x95\x2e\x64\x41\x58\xe8\x9c\x7e\x14\xba\xee\x27\xde\x38\x57\x8d\x9f\xe3\xaa\x32\x3a\x0b\x19\x0b\xe2\x18\xfe\x48\x61\x21\x8c\x7b\x64\x41\x98\x6b\x9d\x17\xc8\x73\x5d\x08\x95\x73\x6d\xf2\x38\x37\x55\xd2\xe9\xad\x28\xc4\x7b\x34\xb5\x4c\x90\x05\xd5\x1a\xc2\xa6\xe1\x8b\xf7\x37\xde\xc5\x85\x70\x1b\x78\xb5\xdf\x93\x95\xa6\xe1\xc7\x2f\x21\xb6\x75\x72\x42\xb2\x11\x2a\x2d\xd0\xd8\x90\x4d\x18\xab\x85\x81\x39\x66\x62\x5b\xb8\x4b\xad\x32\x99\x83\xad\x13\xde\x3e\x32\x96\x6d\x55\x02\x52\x49\x17\x4d\xa0\x61\x01\x65\x82\xdf\x3b\x23\x55\xfe\x55\x98\xe8\xf7\xa3\x8b\x7c\x8e\xeb\x6d\xfe\x2e\x4d\xcd\x14\xc2\x94\x9e\xb9\x48\x53\x13\x4e\x21\xbc\x78\xf3\xfa\xaf\xd7\xf4\xe0\x55\x40\xa8\x14\x4a\x74\x46\x26\x16\x0a\x69\x1d\x2a\x20\x4d\xb4\x36\x9c\xfc\xcc\xc8\xc7\xd5\x6a\xd1\xd9\xa0\xb4\x8e\x4d\xbc\xf1\x26\x48\xe1\x97\x51\xaf\x97\x8b\xcb\x0e\x95\xd2\x3f\x46\xfd\xd3\xa3\xe6\xcb\xc5\x25\x44\x84\x3d\xf9\x11\xdc\xd7\xea\x8b\x45\x40\x55\x4b\xa3\x55\x89\xca\x41\x2d\x8c\x14\xeb\x02\xed\x14\x64\x06\x16\x1d\x87\x0f\x85\xc8\x2d\x6c\x44\x8d\x50\x19\xa9\x8d\x74\x8f\xbe\x9f\xe1\x4a\xd5\xa4\x6f\x39\x0b\x64\xe6\x81\xe1\x62\x06\xda\xf2\x6b\x74\xa8\xea\x28\x9c\x5f\xbd\xff\x72\xfd\xef\xbb\xf9\x7c\x19\x4e\xfe\x6e\x15\x5e\xcc\x20\x0c\xa9\x28\xc1\x89\x2a\xc0\xcc\x2b\xb2\x60\xef\x51\x7d\x57\x1f\xa3\x2e\x3e\x2f\x57\x84\xe7\x45\xa7\xf0\xfa\x84\xc3\x0c\xb2\xd2\xf1\xfb\xca\x48\xe5\xb2\x28\xbc\xf8\xcd\x86\x53\x7f\x75\xd2\x9b\x78\xc2\x71\xba\xfd\x3c\xbf\x47\x76\xc6\x6e\x3f\x81\x49\xc5\x7a\x1e\x66\x5f\xd6\x11\xe6\xbe\x6b\xea\x3b\xdc\x5d\xa9\xb4\xd2\x52\x39\x1b\xd9\x76\xc4\xa0\x5a\xf3\xa6\xe1\xdd\xc0\xf1\x3b\x51\xe2\x7e\x7f\xef\x79\x61\xe2\xc7\x62\xb8\x41\xb6\xe2\x18\xde\x6f\xad\x54\x68\x2d\xa4\xba\x14\x52\xf1\xb6\x13\xfe\x31\xa2\xea\xa7\x16\x76\xd2\x6d\xa0\x94\x69\x5a\xe0\x4e\x18\xb4\x1c\xee\x11\xa1\x1f\xc1\x78\x2c\xc9\x35\x0b\x7a\x4f\x66\x83\x0a\x27\xb8\x0e\xad\x77\xb4\x6b\xb9\xde\x9d\xc1\x7c\x40\xd3\x1c\xb1\xa0\x69\x8c\x50\x39\xc2\x4b\x49\xa9\x1b\x02\xba\x45\xb7\xd1\xa9\x25\x16\x60\x41\xd0\x34\x2b\xfd\x49\xef\xd0\xc0\x4b\xd9\xc5\x3a\x00\xce\x7c\xb8\xb7\xe2\x01\x9b\xe6\x07\xe9\xc1\x8b\xa0\x69\x50\xa5\x84\x46\x1e\xe1\x90\x9d\x8b\xf6\xfe\x51\x8e\x27\xcf\x74\x6b\x40\xe1\x4f\x98\x86\x19\x9c\x71\xfb\xe0\xcf\xa1\x0e\x16\x0b\x4c\x68\xcb\x1c\x6a\xf7\x8b\x25\x39\x84\xf5\x5d\x51\x0e\xb1\x0d\x2a\x94\x06\x83\x6e\x6b\x14\x0c\xef\xa8\xe5\x68\x99\x6d\x15\x58\x27\x8c\xb3\x20\x40\xe1\x0e\x88\xbe\xba\xad\x33\x05\xcf\x2f\xfd\x81\xf8\x51\x80\xa7\xd0\xee\x5d\xeb\xb3\xdb\x20\x21\x55\xc2\x5a\x4c\x21\x69\xe9\x9a\x94\x0b\x9d\xe7\x68\xda\xc6\x5e\x6e\x55\x94\x64\x63\x1a\xf7\xd4\xdd\x37\xd6\xc5\x28\x88\x3b\xdc\xf5\x8d\x35\xf9\xae\x7c\x4f\x8d\x07\x05\x27\x33\x48\xb2\x9c\x5f\xd3\xf2\x96\x09\xcd\xec\x12\x6d\xa5\x95\xc5\x2b\x95\xe8\x14\x0d\xcc\x66\xa0\x64\xe1\x87\xf1\x67\x9a\xdd\x4c\xd1\x89\xe4\x9d\x6a\xaf\x46\xd3\xea\xeb\x78\x8b\xc9\x46\x28\x99\x88\xe2\xd0\xe8\x68\x4c\x42\x7e\x96\xe2\x01\x23\x12\x03\x1a\xa3\x4d\x37\x18\x37\xca\xa1\x31\xdb\xca\xf5\xb1\x72\x16\xe4\xfa\x10\xf8\x20\xff\xd8\xbe\x89\x08\xae\xbb\xdb\xae\xa8\x96\xe3\xfb\x8b\x94\xd8\x76\x03\x06\x85\xce\xf9\x82\x28\xb0\x50\x51\xe8\x8c\x50\x96\x28\x30\xec\x57\x1e\x3d\x74\xcb\x83\xa2\x1f\xc8\x98\xc0\x83\xd2\x67\x9f\xb6\x56\x97\x79\xbc\xdd\x7e\xa3\xd4\x07\x25\x6f\x3d\x89\xc2\xd8\xc3\xb4\x5f\x0b\x71\x38\x6d\xd5\x3b\x37\x3f\x90\x1b\x5e\xc2\x6f\x54\x8a\xdf\x26\x67\xae\x26\x65\x5a\x48\x85\xa7\x11\x2e\x5b\x85\x73\x18\xf4\x4f\x16\x67\x30\x16\xad\xc2\x39\x0c\xfb\x58\xae\x75\x71\x1a\xe2\xde\xcb\xcf\x21\x38\x23\x92\x33\x3e\xac\x48\x3c\xf1\xf9\xf5\x4d\xf1\xf6\x55\xab\xf9\xc9\x57\xf0\x9d\x4a\x7d\xa2\xa3\xa3\x6a\x4c\xa1\xa4\xa5\x15\x75\x25\xf7\x9f\x0c\x43\x2d\x7f\xa1\xe4\x74\xf1\xbb\x8a\xf7\x6b\x8c\x02\xda\xf4\x44\x48\x44\x4a\x82\xa1\xdd\xfa\xd1\x9a\xfe\x64\x9a\x26\xcf\x88\xea\xf0\x45\xb4\x19\x07\xe5\x19\xe5\xff\x04\x45\x17\xc3\xe9\x38\xa6\x7e\x8d\x92\x37\x85\x9a\xd2\xa8\x51\x64\x0a\x5d\xe7\x4f\x14\xba\xa4\x7a\x42\x59\x66\x5e\xf7\xc5\x81\x12\x86\x68\xd0\x18\x3a\xb6\x64\xc9\x02\x3f\xeb\x81\x35\xf5\x38\x65\x04\xd5\xae\xdf\x31\xc3\x06\x81\x67\x28\xff\x9d\xd6\xcf\x91\xf1\x53\x54\xad\xf9\x12\x73\xf2\xc8\x9c\x58\xe3\x91\x9d\x82\x35\xf5\x51\xb7\x58\xde\xe6\xb2\x50\xe3\xf4\x2d\xb7\xea\x05\x3b\xce\x12\x7e\x93\x94\xa0\xb7\xaf\x5a\xb6\xd8\x33\xf6\x5f\x00\x00\x00\xff\xff\x4b\xa4\x0d\x32\xcc\x0c\x00\x00")

func svcServerRunGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcServerRunGotemplate,
		"svc/server/run.gotemplate",
	)
}

func svcServerRunGotemplate() (*asset, error) {
	bytes, err := svcServerRunGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/server/run.gotemplate", size: 3276, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc, 0x2d, 0x5d, 0x3a, 0x7d, 0xdd, 0x75, 0xb1, 0x5a, 0x6f, 0xe5, 0x47, 0xb5, 0xeb, 0x58, 0xa5, 0x17, 0xfe, 0xf7, 0x61, 0x61, 0x35, 0x6e, 0x8a, 0x5b, 0x54, 0x71, 0x9a, 0xd5, 0x7e, 0x6f, 0x22}}
	return a, nil
}

var _svcTransport_grpcGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x4b\x6f\xe3\x36\x10\x3e\x8b\xbf\x62\x6a\x2c\x0a\x6b\xe1\x50\x3d\x07\xc8\x65\x93\x74\x13\xb4\x79\x20\x4d\xb7\x87\xc5\x62\x41\x4b\x63\x89\xb0\x44\x2a\x24\x6d\xc7\x25\xf4\xdf\x17\x43\x3d\x2c\x27\x8e\x93\x83\x01\x8b\xf3\xcd\xeb\xfb\x86\x23\x25\x09\x9c\xeb\x0c\x21\x47\x85\x46\x38\xcc\x60\xbe\x85\x42\x6c\x96\x1c\x2e\xee\xe0\xf6\xee\x11\x2e\x2f\xae\x1f\x39\x4b\x12\x78\x40\xb3\x52\x4a\xaa\x3c\xd8\x61\x23\xcb\x12\xf4\x1a\xcd\xc6\x48\x87\xe0\x0a\x69\x61\x21\x4b\x0c\xd8\x6f\x68\xac\xd4\xea\x14\xbc\xe7\xdd\xff\xa6\x19\x19\xe0\x42\x38\x1c\x5b\xe9\xb9\x69\x18\xab\x45\xba\x14\x39\x82\x5d\xa7\x8c\xf0\x8f\x7d\x58\xa8\x8d\x5e\xcb\x0c\x2d\x58\x34\x6b\x34\x27\x56\x66\x08\x73\xa9\x32\xa9\x72\x0b\x0b\x6d\xc0\x15\x08\xf9\xc3\xfd\x39\x38\x23\x94\xad\xb5\x71\xa1\x96\x6b\x07\x2b\x27\x4b\xf9\x3f\xda\x00\x19\xac\x49\x6e\xea\x94\xff\x13\xc2\x71\xc6\x64\x45\x87\x30\x65\xd1\x44\xa1\x4b\x0a\xe7\xea\x09\x8b\x26\xa9\x56\x0e\x9f\xdd\x84\xb1\x68\x92\x6b\x9d\x97\xc8\x73\x5d\x0a\x95\x73\x6d\xf2\x10\x22\xa9\xd0\x89\x4c\x38\x41\x18\x3a\x18\x32\xc0\x24\x97\xae\x58\xcd\x79\xaa\xab\x24\xd7\x27\x4b\xe9\x12\xfa\xed\x97\x40\x6e\x7d\xab\x54\x8d\x4c\x91\x45\xf5\x1c\x26\xde\xf3\xfb\x2f\xd7\xa1\xac\x7b\xe1\x0a\x38\x69\x9a\x09\x8b\x03\x2f\x37\x62\x89\x5f\x1f\xee\xcf\xdb\xea\xa1\x12\x4b\xb4\x20\xc0\xa2\x03\xbd\x00\x54\x59\xad\xa5\x72\x16\xc4\x5a\xc8\x52\xcc\x4b\x04\x41\xf6\x40\x8f\xf7\xbc\x4b\xc3\x6f\x45\x85\x4d\xd3\x53\xb0\x58\xa9\xf4\x45\xe4\xe9\x2e\xd4\x65\xff\x6f\x06\xba\x76\x52\x2b\x0b\x9c\xf3\xbd\x7e\x3b\x32\xef\x82\x39\x86\x7a\xce\xdf\xc8\x05\x9e\x45\x76\x84\xb5\x70\x7a\x06\xdf\x7f\xbc\x1d\xcc\xb3\x28\x3a\x64\xfd\x82\x0b\x6d\x70\xda\x2b\xf0\xa8\xcf\x5b\xb9\xe2\x19\x8b\x9a\x97\x39\xce\x40\xd4\x35\xaa\x6c\xba\x77\x3c\xb4\xc3\x39\x8f\x59\x64\xd0\xad\x8c\x82\xdf\x29\x5b\x9b\xc3\x07\x79\xbc\x87\x47\xfd\xb7\xde\xa0\x81\xbd\x96\xa0\x69\x58\xe4\xbd\x11\x2a\x47\xf8\x24\xa9\x91\xc1\x7e\x83\xae\xd0\x99\x25\x44\xe4\x7d\xef\xfe\x49\x76\x5c\x9c\xc2\x7e\x4b\xb7\xb8\xe9\x58\x67\x51\x14\x0d\xcc\x73\xef\x07\x97\x5e\x84\x19\x21\x2e\x30\xd5\x59\x10\x6b\x84\x78\xc0\xa7\x15\xda\x16\x70\xa9\x0e\x02\x6c\xad\x95\xc5\x80\xd8\x63\x82\x73\x4e\x87\xc4\x9d\xf7\x27\x34\x45\x54\x79\xc3\x9a\x30\x72\x3b\x42\x40\x56\x75\x89\x15\xd2\x54\xd0\x8d\xf2\xfe\xab\x0e\x54\x1c\xd6\x5a\x2a\x87\x66\x21\x52\x64\x6e\x5b\xe3\x38\x8e\x75\x66\x95\x3a\xf0\x0c\x00\x68\x5a\xfe\x55\x43\x64\xcc\x8e\x47\x65\xec\x7d\xce\x0f\x50\x0e\xf0\x82\xf3\x2b\xa1\xb2\x12\x0d\xdb\x35\xdc\x76\xdb\x85\x09\x8b\x65\x54\xb1\xd3\xbb\xe6\x3f\xde\xf7\xbb\xa5\x86\x9b\x37\xb5\xf0\x79\x97\x2a\xde\x85\x1f\xaa\x9f\xa6\xee\x19\xba\x85\xc4\xbb\x49\x9f\x81\xc1\x27\xf8\x1c\xee\xda\x0e\xdf\x4d\x41\xd3\xc4\x30\x7d\x6d\x6b\x07\xa0\x69\x66\x80\xc6\x68\x4a\xc5\xa2\x9f\x14\xa8\x0e\x27\x54\x24\x4d\xdd\x2b\xf6\xda\x4b\x47\xf3\x44\x95\x84\xcc\x31\x8b\xe4\x22\x38\xfd\x76\x06\x4a\x96\x14\xaa\xbf\x43\x4a\x96\x21\x5e\xb8\x8a\xdd\x99\xc1\x9a\x1f\xa9\x28\x9e\x91\x17\x6b\x98\xf7\xad\x1a\xa4\x45\xc7\x67\x3b\xee\xef\x93\x99\x24\x70\xec\x66\x80\xa4\x4d\xf8\xe2\x2d\xd0\x3a\x74\x88\x3f\x49\x0d\x57\x08\x47\x5c\xaf\xd1\xd0\x1e\x0d\x37\xa0\xdd\x9e\xaf\x87\xca\x74\x91\x9d\x06\x01\x2b\x8b\xe6\x24\xd3\x95\x90\xea\x18\x98\xc3\xbd\x91\x95\x30\xb2\xdc\x92\xcb\x62\x55\x82\x54\x61\x85\x8f\x96\xf1\xb1\x3e\xa6\x3f\x5f\x8f\x02\xf5\xf2\x80\x4f\xbb\xd1\xf3\x34\x00\xa3\xa7\xb1\xe2\x34\x37\xa7\x67\xbd\xcf\x21\x55\xfa\x19\x1a\xa9\xf7\x74\x44\xa0\x76\xdd\x7c\x48\xa0\xa3\x9b\xe9\xa0\x42\xad\x47\x0f\x79\x4b\xa2\xf7\xc9\xef\x52\x04\xa9\x8e\x08\x5a\x97\xdb\x0f\x29\x74\xb4\x91\x43\x12\x0d\x15\x7c\x50\x23\x5b\x13\x8b\xbd\xd7\xd1\xbb\x33\x92\xc9\xd6\x87\x74\xba\xc2\xb2\x46\x63\x59\x5b\xfa\xab\x97\xe6\xe1\xf5\x52\x65\x03\x92\xdf\x5c\xc4\x2f\x01\x54\x25\x2d\xc9\xe5\x0c\xd6\xa1\xd2\xa0\x7d\x95\x85\x45\x20\x17\xb0\x1e\x2f\x86\xf6\x3b\x07\x61\x89\xdb\x20\x72\x96\xd1\x17\xa7\x76\x05\x31\xdb\x67\xa1\x9d\x5b\x09\x07\xd3\x65\x0c\x9b\x42\xa6\x45\x80\x96\x25\x94\xa4\x52\x17\x45\xa8\x2c\xbc\x7b\xe8\x33\x8d\x9f\x0b\xa5\x95\x4c\x45\x79\x85\x22\x43\xf3\x17\x6e\xe9\x2b\xc8\x75\x89\xac\x6e\x27\x45\x3a\x48\x85\x82\x39\xf6\x21\xd2\x14\xad\xc5\x8c\x72\xa3\x74\x05\x9a\x2e\x33\xd9\x89\x8a\xb3\xa1\xd7\xff\xa4\x2b\xbe\x89\x72\x85\xed\xde\xa3\x5e\xbf\xff\xf1\x23\x7e\x17\xf8\x46\x75\xd3\x65\xbc\x8b\x10\x5e\xb1\x83\x74\xa9\x7b\x66\x0d\xfb\x15\x00\x00\xff\xff\x5b\x5f\x39\x83\x97\x0b\x00\x00")

func svcTransport_grpcGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcTransport_grpcGotemplate,
		"svc/transport_grpc.gotemplate",
	)
}

func svcTransport_grpcGotemplate() (*asset, error) {
	bytes, err := svcTransport_grpcGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/transport_grpc.gotemplate", size: 2967, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe2, 0x5c, 0xc0, 0xb8, 0x1, 0x8, 0x16, 0x5d, 0x8e, 0xf2, 0xf1, 0xb6, 0xc8, 0xc6, 0x74, 0x4d, 0x74, 0xf4, 0xc5, 0x6d, 0x94, 0xbf, 0xb, 0x6, 0xa8, 0xd0, 0xd4, 0x30, 0x85, 0xf9, 0x3, 0x87}}
	return a, nil
}

var _svcTransport_httpGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\x31\x0a\xc2\x50\x0c\x06\xe0\xbd\xa7\xc8\xdc\xe1\xe5\x1a\x1d\x85\xbe\x0b\x84\xfa\xdb\x82\xd1\x3c\xd2\xa0\x43\xc8\xdd\x05\xe9\xfe\x7d\x99\x3c\xd3\x0a\xd0\x21\xdf\x27\xef\x78\xc3\x25\xcc\xf9\x88\x18\x1c\x78\x0d\x95\xc0\xc9\x27\xfc\x03\x6f\xbb\xd1\xc3\x9c\x36\xbb\x83\x66\xae\x9a\x32\x37\x51\xa5\xb6\xf4\x7e\x5b\xa0\x03\xde\xd6\x3f\xed\x57\xa5\x56\x35\xfd\x02\x00\x00\xff\xff\xed\x08\x4c\xd3\x65\x00\x00\x00")

func svcTransport_httpGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcTransport_httpGotemplate,
		"svc/transport_http.gotemplate",
	)
}

func svcTransport_httpGotemplate() (*asset, error) {
	bytes, err := svcTransport_httpGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/transport_http.gotemplate", size: 101, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0x8, 0xe3, 0xbb, 0xa, 0x8e, 0xd7, 0x35, 0xcc, 0x32, 0xc4, 0x22, 0x4, 0x9c, 0xff, 0x72, 0x2f, 0xaa, 0x4, 0x6f, 0x28, 0x21, 0xbb, 0x31, 0x58, 0x2d, 0x34, 0xf0, 0xdb, 0xca, 0x76, 0xb5}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/NAME/main.gotemplate":             cmdNameMainGotemplate,
	"handlers/handlers.gotemplate":         handlersHandlersGotemplate,
	"handlers/handlers.methods.gotemplate": handlersHandlersMethodsGotemplate,
	"handlers/hooks.config.gotemplate":     handlersHooksConfigGotemplate,
	"handlers/hooks.handler.gotemplate":    handlersHooksHandlerGotemplate,
	"handlers/hooks.imports.gotemplate":    handlersHooksImportsGotemplate,
	"handlers/middlewares.gotemplate":      handlersMiddlewaresGotemplate,
	"svc/client/grpc/client.gotemplate":    svcClientGrpcClientGotemplate,
	"svc/client/http/client.gotemplate":    svcClientHttpClientGotemplate,
	"svc/config.gotemplate":                svcConfigGotemplate,
	"svc/endpoints.gotemplate":             svcEndpointsGotemplate,
	"svc/server/run.gotemplate":            svcServerRunGotemplate,
	"svc/transport_grpc.gotemplate":        svcTransport_grpcGotemplate,
	"svc/transport_http.gotemplate":        svcTransport_httpGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": {nil, map[string]*bintree{
		"NAME": {nil, map[string]*bintree{
			"main.gotemplate": {cmdNameMainGotemplate, map[string]*bintree{}},
		}},
	}},
	"handlers": {nil, map[string]*bintree{
		"handlers.gotemplate":         {handlersHandlersGotemplate, map[string]*bintree{}},
		"handlers.methods.gotemplate": {handlersHandlersMethodsGotemplate, map[string]*bintree{}},
		"hooks.config.gotemplate":     {handlersHooksConfigGotemplate, map[string]*bintree{}},
		"hooks.handler.gotemplate":    {handlersHooksHandlerGotemplate, map[string]*bintree{}},
		"hooks.imports.gotemplate":    {handlersHooksImportsGotemplate, map[string]*bintree{}},
		"middlewares.gotemplate":      {handlersMiddlewaresGotemplate, map[string]*bintree{}},
	}},
	"svc": {nil, map[string]*bintree{
		"client": {nil, map[string]*bintree{
			"grpc": {nil, map[string]*bintree{
				"client.gotemplate": {svcClientGrpcClientGotemplate, map[string]*bintree{}},
			}},
			"http": {nil, map[string]*bintree{
				"client.gotemplate": {svcClientHttpClientGotemplate, map[string]*bintree{}},
			}},
		}},
		"config.gotemplate":    {svcConfigGotemplate, map[string]*bintree{}},
		"endpoints.gotemplate": {svcEndpointsGotemplate, map[string]*bintree{}},
		"server": {nil, map[string]*bintree{
			"run.gotemplate": {svcServerRunGotemplate, map[string]*bintree{}},
		}},
		"transport_grpc.gotemplate": {svcTransport_grpcGotemplate, map[string]*bintree{}},
		"transport_http.gotemplate": {svcTransport_httpGotemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
