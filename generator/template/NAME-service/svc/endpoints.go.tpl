// Code generated by hawk. DO NOT EDIT.
// Rerunning hawk will overwrite this file.
// Version: {{.Version}}
// Version Date: {{.VersionDate}}

package svc

// This file contains methods to make individual endpoints from services,
// request and response types to serve those endpoints, as well as encoders and
// decoders for those types, for all of our supported transport serialization
// formats.

import (
	"fmt"
	"context"
	"net/http"
    transport "github.com/go-kit/kit/transport/http"

	"github.com/go-kit/kit/endpoint"

	pb "{{.PBImportPath -}}"
)

// Endpoints collects all of the endpoints that compose an add service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
//
// In a server, it's useful for functions that need to operate on a per-endpoint
// basis. For example, you might pass an Endpoints to a function that produces
// an http.Handler, with each method (endpoint) wired up to a specific path. (It
// is probably a mistake in design to invoke the Service methods on the
// Endpoints struct in a server.)
//
// In a client, it's useful to collect individually constructed endpoints into a
// single type that implements the Service interface. For example, you might
// construct individual endpoints using transport/http.NewClient, combine them into an Endpoints, and return it to the caller as a Service.
type Endpoints struct {
    pb.Unimplemented{{GoName .Service.Name}}Server
    httpServerOptions    map[string][]transport.ServerOption
    httpRequestDecoders  map[string]transport.DecodeRequestFunc
    httpResponseEncoders map[string]transport.EncodeResponseFunc
    httpHandlerFuncs     map[string]func(http.ResponseWriter, *http.Request)

{{range $i := .Service.Methods}}
    {{ if and (not $i.RequestStream) (not $i.ResponseStream) }}
    	{{$i.Name}}Endpoint    endpoint.Endpoint
    {{ end }}
{{- end}}
}

func NewEndpoints() Endpoints {
	return Endpoints{
		httpServerOptions:    make(map[string][]transport.ServerOption),
		httpRequestDecoders:  make(map[string]transport.DecodeRequestFunc),
		httpResponseEncoders: make(map[string]transport.EncodeResponseFunc),
		httpHandlerFuncs:     make(map[string]func(http.ResponseWriter, *http.Request)),
	}
}

// Endpoints
{{range $i := .Service.Methods}}
    {{ if and (not $i.RequestStream) (not $i.ResponseStream) }}
        func (e Endpoints) {{$i.Name}}(ctx context.Context, in *pb.{{GoName $i.Request}}) (*pb.{{GoName $i.Response}}, error) {
            response, err := e.{{$i.Name}}Endpoint(ctx, in)
            if err != nil {
                return nil, err
            }
            return response.(*pb.{{GoName $i.Response}}), nil
        }
    {{ end }}
{{end}}

// Make Endpoints
{{with $te := .}}
	{{range $i := $te.Service.Methods}}
	    {{ if and (not $i.RequestStream) (not $i.ResponseStream) }}
            func Make{{$i.Name}}Endpoint(s pb.{{$te.Service.Name}}Server) endpoint.Endpoint {
                return func(ctx context.Context, request interface{}) (response interface{}, err error) {
                    req := request.(*pb.{{GoName $i.Request}})
                    v, err := s.{{$i.Name}}(ctx, req)
                    if err != nil {
                        return nil, err
                    }
                    return v, nil
                }
            }
        {{ end }}
	{{end}}
{{end}}

// WrapAllExcept wraps each Endpoint field of struct Endpoints with a
// go-kit/kit/endpoint.Middleware.
// Use this for applying a set of middlewares to every endpoint in the service.
// Optionally, endpoints can be passed in by name to be excluded from being wrapped.
// WrapAllExcept(middleware, "Status", "Ping")
func (e *Endpoints) WrapAllExcept(middleware endpoint.Middleware, excluded ...string) {
	included := map[string]struct{}{
		{{- range $i := .Service.Methods}}
		    {{ if and (not $i.RequestStream) (not $i.ResponseStream) }}
			    "{{$i.Name}}": {},
			{{ end }}
		{{- end}}
	}

	for _, ex := range excluded {
		if _, ok := included[ex]; !ok {
			panic(fmt.Sprintf("Excluded endpoint '%s' does not exist; see middlewares/endpoints.go", ex))
		}
		delete(included, ex)
	}

	for inc := range included {
		{{- range $i := .Service.Methods}}
		    {{ if and (not $i.RequestStream) (not $i.ResponseStream) }}
                if inc == "{{$i.Name}}" {
                    e.{{$i.Name}}Endpoint = middleware(e.{{$i.Name}}Endpoint)
                }
			{{ end }}
		{{- end}}
	}
}

// LabeledMiddleware will get passed the endpoint name when passed to
// WrapAllLabeledExcept, this can be used to write a generic metrics
// middleware which can send the endpoint name to the metrics collector.
type LabeledMiddleware func(string, endpoint.Endpoint) endpoint.Endpoint

// WrapAllLabeledExcept wraps each Endpoint field of struct Endpoints with a
// LabeledMiddleware, which will receive the name of the endpoint. See
// LabeledMiddleware. See method WrapAllExcept for details on excluded
// functionality.
func (e *Endpoints) WrapAllLabeledExcept(middleware func(string, endpoint.Endpoint) endpoint.Endpoint, excluded ...string) {
	included := map[string]struct{}{
		{{- range $i := .Service.Methods}}
		    {{ if and (not $i.RequestStream) (not $i.ResponseStream) }}
			    "{{$i.Name}}": {},
			{{ end }}
		{{- end}}
	}

	for _, ex := range excluded {
		if _, ok := included[ex]; !ok {
			panic(fmt.Sprintf("Excluded endpoint '%s' does not exist; see middlewares/endpoints.go", ex))
		}
		delete(included, ex)
	}

	for inc := range included {
		{{- range $i := .Service.Methods}}
		    {{ if and (not $i.RequestStream) (not $i.ResponseStream) }}
                if inc == "{{$i.Name}}" {
                    e.{{$i.Name}}Endpoint = middleware("{{$i.Name}}", e.{{$i.Name}}Endpoint)
                }
            {{ end }}
		{{- end}}
	}
}

// WrapAllWithHttpOptionExcept wraps each Endpoint entry of filed HttpServerOptions of struct Endpoints with a
// transport.ServerOption.
// Use this for applying a set of server options to every endpoint in the service.
// Optionally, endpoints can be passed in by name to be excluded from being wrapped.
// WrapAllWithHttpOptionExcept(serverOption, "Status", "Ping")
func (e *Endpoints) WrapAllWithHttpOptionExcept(serverOption transport.ServerOption, excluded ...string) {
	included := map[string]struct{}{
		{{- range $i := .Service.Methods}}
		    {{ if and (not $i.RequestStream) (not $i.ResponseStream) }}
    			"{{$i.Name}}": {},
            {{ end }}
		{{- end}}
	}

	for _, ex := range excluded {
		if _, ok := included[ex]; !ok {
			panic(fmt.Sprintf("Excluded endpoint '%s' does not exist; see middlewares/endpoints.go", ex))
		}
		delete(included, ex)
	}

	for inc := range included {
		var options []transport.ServerOption
		if o, ok := e.httpServerOptions[inc]; ok {
			options = append(o, serverOption)
		} else {
			options = make([]transport.ServerOption, 1)
			options[0] = serverOption
		}
		e.httpServerOptions[inc] = options
	}
}

// WrapWithHttpOption wraps one Endpoint entry of filed HttpServerOptions of struct Endpoints with a
// transport.ServerOption.
// WrapWithHttpOption(serverOption, "Status")
func (e *Endpoints) WrapWithHttpOption(endpoint string, serverOption transport.ServerOption) {
    var options []transport.ServerOption
    if o, ok := e.httpServerOptions[endpoint]; ok {
        options = append(o, serverOption)
    } else {
        options = []transport.ServerOption{
            serverOption,
        }
    }
    e.httpServerOptions[endpoint] = options
}

// GetHttpServerOptions returns all transport.ServerOption associated with the given endpoint.
func (e Endpoints) GetHttpServerOptions(endpoint string) []transport.ServerOption {
	if options, ok := e.httpServerOptions[endpoint]; ok {
		return options
	}
	return make([]transport.ServerOption, 0)
}

// SetHttpRequestDecoder assigns a transport.DecodeRequestFunc to an endpoint.
func (e Endpoints) SetHttpRequestDecoder(endpoint string, decoder transport.DecodeRequestFunc) {
	e.httpRequestDecoders[endpoint] = decoder
}

// GetHttpRequestDecoder returns the transport.DecodeRequestFunc associated with the given endpoint.
func (e Endpoints) GetHttpRequestDecoder(endpoint string, fallback transport.DecodeRequestFunc) transport.DecodeRequestFunc {
	if decoder, ok := e.httpRequestDecoders[endpoint]; ok {
		return decoder
	}
	return fallback
}

// SetHttpResponseEncoder assigns a transport.EncodeResponseFunc to an endpoint.
func (e Endpoints) SetHttpResponseEncoder(endpoint string, encoder transport.EncodeResponseFunc) {
	e.httpResponseEncoders[endpoint] = encoder
}

// GetHttpResponseEncoder returns the transport.EncodeResponseFunc associated with the given endpoint.
func (e Endpoints) GetHttpResponseEncoder(endpoint string, fallback transport.EncodeResponseFunc) transport.EncodeResponseFunc {
	if encoder, ok := e.httpResponseEncoders[endpoint]; ok {
		return encoder
	}
	return fallback
}

// SetHttpHandlerFunc assigns a custom http HandlerFunc to an endpoint instead of using the default one.
func (e Endpoints) SetHttpHandlerFunc(endpoint string, handler func(http.ResponseWriter, *http.Request)) {
	e.httpHandlerFuncs[endpoint] = handler
}

// GetHttpHandlerFunc returns the http HandlerFunc for the given endpoint.
func (e Endpoints) GetHttpHandlerFunc(endpoint string) func(http.ResponseWriter, *http.Request) {
	if handler, ok := e.httpHandlerFuncs[endpoint]; ok {
		return handler
	}
	return nil
}

// HasHttpHandlerFunc checks if a custom http HandlerFunc is associated with the given endpoint.
func (e Endpoints) HasHttpHandlerFunc(endpoint string) bool {
	_, ok := e.httpHandlerFuncs[endpoint]
	return ok
}
